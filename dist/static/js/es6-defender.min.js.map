{"version":3,"sources":["es6-defender.js"],"names":["PlayerState","Object","freeze","faceLeft","faceRight","exploding","InvaderState","seeking","locked","abducting","mutant","explodingReleaseHuman","Event","abducted","mutated","dead","removeProjectile","removeHuman","playerDead","collectedHuman","easing","playerXAccel","playerYAccel","playerDamping","modulusx","halfmodulusx","starmodulusx","halfstarmodulusx","projectileLifetime","Global","viewWidth","viewHeight","StateVector","id","x","y","xdot","ydot","Player","state","t_startState","sideLen","graphic","Invader","graphicAbducting","Human","Projectile","t_spawned","graphic2","Star","depth","wrapx","wrapstarx","updatePlayerPosition","sv","input","leftright","updown","updatePlayerState","player","updateInvaderPosition","targetx","targety","a","Math","random","updateInvaders","invaders","invaderTargets","map","i","has","get","humanXDot","updateInvaderState","events","t","e","event","idx","findIndex","invaderId","updateHumanPosition","updateHumans","humans","updateProjectilePosition","updateProjectiles","projectiles","cartesianProduct2","arr1","arr2","e1","e2","reduce","arr","concat","toTuples","fst","snd","xoverlap","x1","size1","x2","size2","yoverlap","y1","y2","collided","detectCollisions","svArr1","svArr2","filter","svPair","id1","collidedPair","id2","checkSeekingInvader","invader","inRangeHumans","h","length","humanId","checkLockedInvader","checkAbductingInvader","checkHitInvaders","checkHitPlayerProjectiles","checkHitPlayerInvaders","checkHitPlayerHumans","checkProjectiles","p","toLocal","lx","offsetx","ly","gx_debug","clip","lcoords","remove","objects","graphics","o","splice","delete","fillWith","n","f","Array","fill","targetoffsetx","playerId","projectileId","invaderProjectileId","invaderProjectiles","starfield","Map","score","doGame","fastTextMode","debug","fire","push","seekingInvaders","lockedInvaders","abductingInvaders","mutantInvaders","projectileEvents","hitEvents","playerProjectileHitEvent","playerInvaderHitEvent","playerHumanHitEvent","seekingInvaderEvents","lockedInvaderEvents","abductingInvaderEvents","invaderEvents","allEvents","set","eiofjeiof","g","s","displacementList","displacement","displayList","setString","floor","setNumber"],"mappings":";;;;;;;;;;AACA,IAAIA,cAAcC,OAAOC,MAAP,CAAc,EAACC,UAAS,CAAV,EAAaC,WAAU,CAAvB,EAA0BC,WAAU,CAApC,EAAd,CAAlB;;AAEA,IAAIC,eAAeL,OAAOC,MAAP,CAAc,EAACK,SAAQ,CAAT,EAAYC,QAAO,CAAnB,EAAsBC,WAAU,CAAhC,EAAmCC,QAAO,CAA1C,EAA6CL,WAAU,CAAvD,EAA0DM,uBAAsB,CAAhF,EAAd,CAAnB;;AAEA,IAAIC,QAAQX,OAAOC,MAAP,CAAc,EAACM,QAAO,CAAR,EAAWK,UAAS,CAApB,EAAuBC,SAAQ,CAA/B,EAAkCC,MAAK,CAAvC,EAA0CC,kBAAiB,CAA3D,EAA8DC,aAAY,CAA1E,EAA6EC,YAAW,CAAxF,EAA2FC,gBAAe,CAA1G,EAAd,CAAZ;;AAEA,IAAIC,SAAS,IAAb;AACA,IAAIC,eAAe,GAAnB;AACA,IAAIC,eAAe,GAAnB;AACA,IAAIC,gBAAgB,GAApB;AACA,IAAIC,WAAW,GAAf;AACA,IAAIC,eAAeD,WAAW,CAA9B;AACA,IAAIE,eAAe,GAAnB;AACA,IAAIC,mBAAmBD,eAAe,CAAtC;AACA,IAAIE,qBAAqB,EAAzB;;AAEA,IAAIC,SAAS,EAACC,WAAU,CAAX,EAAcC,YAAW,CAAzB,EAAb;;IAEMC,W,GAEJ,qBAAYC,EAAZ,EAAgBC,CAAhB,EAAmBC,CAAnB,EAA0C;AAAA,MAApBC,IAAoB,uEAAb,CAAa;AAAA,MAAVC,IAAU,uEAAH,CAAG;;AAAA;;AACxC,OAAKJ,EAAL,GAAUA,EAAV;AACA,OAAKC,CAAL,GAASA,CAAT;AACA,OAAKC,CAAL,GAASA,CAAT;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACD,C;;IAGGC,M;;;AAEJ,kBAAYL,EAAZ,EAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBI,KAAtB,EAA6BC,YAA7B,EAA2C;AAAA;;AAAA,gHACnCP,EADmC,EAC/BC,CAD+B,EAC5BC,CAD4B;;AAGzC,UAAKI,KAAL,GAAaA,KAAb;AACA,UAAKC,YAAL,GAAoBA,YAApB;AAJyC;AAK1C;;;EAPkBR,W;;AAUrBM,OAAOG,OAAP,GAAiB,CAAjB;AACAH,OAAOI,OAAP,GAAiB,CAAC,UAAD,EAAa,WAAb,CAAjB;;IAEMC,O;;;AAEJ,mBAAYV,EAAZ,EAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBI,KAAtB,EAA6BC,YAA7B,EAA2C;AAAA;;AAAA,mHACnCP,EADmC,EAC/BC,CAD+B,EAC5BC,CAD4B;;AAGzC,WAAKI,KAAL,GAAaA,KAAb;AACA,WAAKC,YAAL,GAAoBA,YAApB;AAJyC;AAK1C;;;EAPmBR,W;;AAUtBW,QAAQF,OAAR,GAAkB,CAAlB;AACAE,QAAQD,OAAR,GAAkB,wBAAlB;AACAC,QAAQC,gBAAR,GAA2B,mCAA3B;;IAEMC,K;;;AAEJ,iBAAYZ,EAAZ,EAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBC,IAAtB,EAA4BC,IAA5B,EAAkC;AAAA;;AAAA,yGAC1BJ,EAD0B,EACtBC,CADsB,EACnBC,CADmB,EAChBC,IADgB,EACVC,IADU;AAEjC;;;EAJiBL,W;;AAOpBa,MAAMJ,OAAN,GAAgB,CAAhB;AACAI,MAAMH,OAAN,GAAgB,QAAhB;;IAEMI,U;;;AAEJ,sBAAYb,EAAZ,EAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBC,IAAtB,EAA4BC,IAA5B,EAAkCU,SAAlC,EAA6C;AAAA;;AAAA,yHACrCd,EADqC,EACjCC,CADiC,EAC9BC,CAD8B,EAC3BC,IAD2B,EACrBC,IADqB;;AAG3C,WAAKU,SAAL,GAAiBA,SAAjB;AAH2C;AAI5C;;;EANsBf,W;;AASzBc,WAAWL,OAAX,GAAqB,CAArB;AACAK,WAAWJ,OAAX,GAAqB,IAArB;AACAI,WAAWE,QAAX,GAAsB,QAAtB;;IAEMC,I;;;AAEJ,gBAAYhB,EAAZ,EAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBe,KAAtB,EAA6B;AAAA;;AAAA,6GACrBjB,EADqB,EACjBC,CADiB,EACdC,CADc;;AAG3B,WAAKe,KAAL,GAAaA,KAAb;AAH2B;AAI5B;;;EANgBlB,W;;AASnBiB,KAAKP,OAAL,GAAe,GAAf;;AAGA,IAAIS,QAAQ,SAARA,KAAQ,CAACjB,CAAD,EAAO;AACjB,MAAGA,IAAI,CAACT,YAAR,EAAsBS,KAAKV,QAAL,CAAtB,KACK,IAAGU,KAAKT,YAAR,EAAsBS,KAAKV,QAAL;AAC3B,SAAOU,CAAP;AACD,CAJD;;AAMA,IAAIkB,YAAY,SAAZA,SAAY,CAAClB,CAAD,EAAO;AACrB,MAAGA,IAAI,CAACP,gBAAR,EAA0BO,KAAKR,YAAL,CAA1B,KACK,IAAGQ,KAAKP,gBAAR,EAA0BO,KAAKR,YAAL;AAC/B,SAAOQ,CAAP;AACD,CAJD;;AAMA,IAAImB,uBAAuB,SAAvBA,oBAAuB,CAACC,EAAD,EAAKC,KAAL,EAAe;AACxCD,KAAGlB,IAAH,IAAWf,eAAekC,MAAMC,SAAhC;AACAF,KAAGjB,IAAH,IAAWf,eAAeiC,MAAME,MAAhC;;AAEAH,KAAGlB,IAAH,IAAWb,gBAAgB,CAAC+B,GAAGlB,IAA/B;AACAkB,KAAGjB,IAAH,IAAWd,gBAAgB,CAAC+B,GAAGjB,IAA/B;;AAEAiB,KAAGpB,CAAH,GAAO,CAAP;AACAoB,KAAGnB,CAAH,IAAQmB,GAAGjB,IAAX;;AAEA,MAAGiB,GAAGnB,CAAH,GAAO,CAAV,EAAamB,GAAGnB,CAAH,GAAO,CAAP;AACb,MAAGmB,GAAGnB,CAAH,GAAON,OAAOE,UAAP,GAAoB,CAA9B,EAAiCuB,GAAGnB,CAAH,GAAON,OAAOE,UAAP,GAAoB,CAA3B;;AAEjC,SAAOuB,EAAP;AACD,CAdD;;AAgBA,IAAII,oBAAoB,SAApBA,iBAAoB,CAACC,MAAD,EAASJ,KAAT,EAAmB;AACzC,MAAGA,MAAMC,SAAN,IAAmB,CAAtB,EAAyB;AACvBG,WAAOpB,KAAP,GAAgBgB,MAAMC,SAAN,IAAmB,CAAC,CAArB,GAA0BxD,YAAYG,QAAtC,GAAiDH,YAAYI,SAA5E;AACD;AACF,CAJD;;AAMA,IAAIwD,wBAAwB,SAAxBA,qBAAwB,CAACN,EAAD,EAAKf,KAAL,EAAYsB,OAAZ,EAAqBC,OAArB,EAAiC;AAAA;;AAC3D,MAAIC,IAAI,oEACHzD,aAAaC,OADV,EACoB,YAAM;AAC5B+C,OAAGlB,IAAH,IAAW,QAAQ4B,KAAKC,MAAL,KAAgB,GAAxB,CAAX;AACAX,OAAGjB,IAAH,IAAW,QAAQ2B,KAAKC,MAAL,KAAgB,GAAxB,CAAX;AACAX,OAAGpB,CAAH,IAAQoB,GAAGlB,IAAX;AACAkB,OAAGnB,CAAH,IAAQmB,GAAGjB,IAAX;;AAEA,QAAGiB,GAAGnB,CAAH,GAAO,CAAV,EAAa;AAAEmB,SAAGjB,IAAH,GAAU,CAACiB,GAAGjB,IAAd,CAAoBiB,GAAGnB,CAAH,GAAO,CAAP;AAAW;AAC9C,QAAGmB,GAAGnB,CAAH,GAAQN,OAAOE,UAAP,GAAoB,CAA/B,EAAmC;AAAEuB,SAAGjB,IAAH,GAAU,CAACiB,GAAGjB,IAAd,CAAoBiB,GAAGnB,CAAH,GAAQN,OAAOE,UAAP,GAAoB,CAA5B;AAAiC;AAC3F,GATG,0CAUHzB,aAAaE,MAVV,EAUmB,YAAM;AAC3B8C,OAAGlB,IAAH,GAAUyB,OAAV;AACAP,OAAGjB,IAAH,GAAU,GAAV;;AAEAiB,OAAGpB,CAAH,IAAQoB,GAAGlB,IAAX;AACAkB,OAAGnB,CAAH,IAAQmB,GAAGjB,IAAX;AACD,GAhBG,0CAiBH/B,aAAaG,SAjBV,EAiBsB,YAAM;AAC9B6C,OAAGjB,IAAH,GAAU,CAAC,GAAX;;AAEAiB,OAAGnB,CAAH,IAAQmB,GAAGjB,IAAX;AACD,GArBG,0CAsBH/B,aAAaI,MAtBV,EAsBmB,YAAM;AAC3B4C,OAAGpB,CAAH,IAAQ,QAAQ2B,UAAUP,GAAGpB,CAArB,IAA0B,KAAK8B,KAAKC,MAAL,KAAgB,GAArB,CAAlC;AACAX,OAAGnB,CAAH,IAAQ,QAAQ2B,UAAUR,GAAGnB,CAArB,CAAR;AACD,GAzBG,0CA0BH7B,aAAaD,SA1BV,EA0BsB,YAAM,CAC/B,CA3BG,0CA4BHC,aAAaK,qBA5BV,EA4BkC,YAAM,CAC3C,CA7BG,0BA8BJ4B,KA9BI,GAAR;;AAgCA,SAAOe,EAAP;AACD,CAlCD;;AAoCA,IAAIY,iBAAiB,SAAjBA,cAAiB,CAACC,QAAD,EAAWC,cAAX,EAA2BT,MAA3B;AAAA,SACnBQ,SAASE,GAAT,CAAa,aAAK;AAChB,QAAIR,UAAU,CAAd;AAAA,QAAiBC,UAAU,CAA3B;AACA,QAAGQ,EAAE/B,KAAF,IAAWjC,aAAaI,MAA3B,EAAmC;AACjCmD,gBAAUF,OAAOzB,CAAjB;AACA4B,gBAAUH,OAAOxB,CAAjB;AACD,KAHD,MAIK,IAAGiC,eAAeG,GAAf,CAAmBD,EAAErC,EAArB,CAAH,EAA6B;AAChC4B,gBAAUO,eAAeI,GAAf,CAAmBF,EAAErC,EAArB,EAAyBwC,SAAnC;AACD;AACDb,0BAAsBU,CAAtB,EAAyBA,EAAE/B,KAA3B,EAAkCsB,OAAlC,EAA2CC,OAA3C;AACD,GAVD,CADmB;AAAA,CAArB;;AAaA,IAAIY,qBAAqB,SAArBA,kBAAqB,CAACP,QAAD,EAAWQ,MAAX,EAAmBC,CAAnB,EAAyB;AAChDD,SAAON,GAAP,CAAW,aAAK;AACd,QAAGQ,EAAEC,KAAF,IAAWlE,MAAMJ,MAAjB,IAA2BqE,EAAEC,KAAF,IAAWlE,MAAMC,QAA5C,IAAwDgE,EAAEC,KAAF,IAAWlE,MAAMG,IAAzE,IAAiF8D,EAAEC,KAAF,IAAWlE,MAAME,OAArG,EACA;AAAA;;AACE,UAAIiE,MAAMZ,SAASa,SAAT,CAAmB;AAAA,eAAKV,EAAErC,EAAF,IAAQ4C,EAAEI,SAAf;AAAA,OAAnB,CAAV;AACA,UAAIX,IAAIH,SAASY,GAAT,CAAR;AACAT,QAAE/B,KAAF,GAAU,oEACP3B,MAAMJ,MADC,EACQF,aAAaE,MADrB,0CAEPI,MAAMC,QAFC,EAEUP,aAAaG,SAFvB,0CAGPG,MAAME,OAHC,EAGSR,aAAaI,MAHtB,0CAIPE,MAAMG,IAJC,EAIMuD,EAAE/B,KAAF,IAAWjC,aAAaG,SAAxB,GAAoCH,aAAaK,qBAAjD,GAAyEL,aAAaD,SAJ5F,0BAKRwE,EAAEC,KALM,CAAV;AAMAR,QAAE9B,YAAF,GAAiBoC,CAAjB;AACD;AACF,GAbD;AAcD,CAfD;;AAiBA,IAAIM,sBAAsB,SAAtBA,mBAAsB,CAAC5B,EAAD,EAAQ;AAChCA,KAAGpB,CAAH,IAAQoB,GAAGlB,IAAX;AACAkB,KAAGnB,CAAH,IAAQmB,GAAGjB,IAAX;;AAEA,SAAOiB,EAAP;AACD,CALD;;AAOA,IAAI6B,eAAe,SAAfA,YAAe,CAACC,MAAD;AAAA,SAAYA,OAAOf,GAAP,CAAWa,mBAAX,CAAZ;AAAA,CAAnB;;AAEA,IAAIG,2BAA2B,SAA3BA,wBAA2B,CAAC/B,EAAD,EAAQ;AACrCA,KAAGpB,CAAH,IAAQoB,GAAGlB,IAAX;AACAkB,KAAGnB,CAAH,IAAQmB,GAAGjB,IAAX;;AAEA,SAAOiB,EAAP;AACD,CALD;;AAOA,IAAIgC,oBAAoB,SAApBA,iBAAoB,CAACC,WAAD;AAAA,SAAiBA,YAAYlB,GAAZ,CAAgBgB,wBAAhB,CAAjB;AAAA,CAAxB;;AAEA,IAAIG,oBAAoB,SAApBA,iBAAoB,CAACC,IAAD,EAAOC,IAAP;AAAA,SACtBD,KAAKpB,GAAL,CAAS;AAAA,WAAMqB,KAAKrB,GAAL,CAAS;AAAA,aAAM,CAACsB,EAAD,EAAKC,EAAL,CAAN;AAAA,KAAT,CAAN;AAAA,GAAT,EAAyCC,MAAzC,CAAgD,UAACC,GAAD,EAAMjB,CAAN;AAAA,WAAYiB,IAAIC,MAAJ,CAAWlB,CAAX,CAAZ;AAAA,GAAhD,EAA2E,EAA3E,CADsB;AAAA,CAAxB;;AAGA,IAAImB,WAAW,SAAXA,QAAW,CAACF,GAAD;AAAA,SACbA,IAAIzB,GAAJ,CAAQ;AAAA,WAAM,EAAC4B,KAAIlC,EAAE,CAAF,CAAL,EAAWmC,KAAInC,EAAE,CAAF,CAAf,EAAN;AAAA,GAAR,CADa;AAAA,CAAf;;AAIA,IAAIoC,WAAW,SAAXA,QAAW,CAACC,EAAD,EAAKC,KAAL,EAAYC,EAAZ,EAAgBC,KAAhB;AAAA,SACZD,KAAMF,KAAKC,KAAX,IACAD,KAAME,KAAKC,KAFC;AAAA,CAAf;;AAIA,IAAIC,WAAW,SAAXA,QAAW,CAACC,EAAD,EAAKJ,KAAL,EAAYK,EAAZ,EAAgBH,KAAhB;AAAA,SACZG,KAAMD,KAAKJ,KAAX,IACAI,KAAMC,KAAKH,KAFC;AAAA,CAAf;;AAIA,IAAII,WAAW,SAAXA,QAAW,OAAeN,KAAf,SAAoCE,KAApC;AAAA,MAAIH,EAAJ,QAAElE,CAAF;AAAA,MAAUuE,EAAV,QAAQtE,CAAR;AAAA,MAAyBmE,EAAzB,SAAuBpE,CAAvB;AAAA,MAA+BwE,EAA/B,SAA6BvE,CAA7B;AAAA,SACZgE,SAASC,EAAT,EAAaC,KAAb,EAAoBC,EAApB,EAAwBC,KAAxB,KAAkCC,SAASC,EAAT,EAAaJ,KAAb,EAAoBK,EAApB,EAAwBH,KAAxB,CADtB;AAAA,CAAf;;AAIA,IAAIK,mBAAmB,SAAnBA,gBAAmB,CAACC,MAAD,EAASR,KAAT,EAAgBS,MAAhB,EAAwBP,KAAxB;AAAA,SACrBP,SAASR,kBAAkBqB,MAAlB,EAA0BC,MAA1B,CAAT,EACGC,MADH,CACU;AAAA,WAAUJ,SAASK,OAAOf,GAAhB,EAAqBI,KAArB,EAA4BW,OAAOd,GAAnC,EAAwCK,KAAxC,CAAV;AAAA,GADV,EAEGlC,GAFH,CAEO;AAAA,WAAiB,EAAC4C,KAAIC,aAAajB,GAAb,CAAiBhE,EAAtB,EAA0BkF,KAAID,aAAahB,GAAb,CAAiBjE,EAA/C,EAAjB;AAAA,GAFP,CADqB;AAAA,CAAvB;;AAKA,IAAImF,sBAAsB,SAAtBA,mBAAsB,CAACC,OAAD,EAAUjC,MAAV,EAAqB;AAC7C,MAAIkC,gBAAgBlC,OAAO2B,MAAP,CAAc;AAAA,WAAKZ,SAASkB,QAAQnF,CAAjB,EAAoBS,QAAQF,OAA5B,EAAqC8E,EAAErF,CAAvC,EAA0CW,MAAMJ,OAAhD,CAAL;AAAA,GAAd,CAApB;AACA,MAAG6E,cAAcE,MAAd,GAAuB,CAA1B,EAA6B;AAC3B,QAAGxD,KAAKC,MAAL,KAAgB,GAAnB,EAAwB;AACtB,aAAO,CAAC,EAACa,OAAMlE,MAAMJ,MAAb,EAAqByE,WAAUoC,QAAQpF,EAAvC,EAA2CwF,SAAQH,cAAc,CAAd,EAAiBrF,EAApE,EAAwEwC,WAAU6C,cAAc,CAAd,EAAiBlF,IAAnG,EAAD,CAAP;AACD;AACF;AACD,SAAO,EAAP;AACD,CARD;;AAUA,IAAIsF,qBAAqB,SAArBA,kBAAqB,CAACL,OAAD,EAAUxC,CAAV,EAAgB;AACvC,SAASwC,QAAQlF,CAAR,GAAYQ,QAAQF,OAArB,IAAiCZ,OAAOE,UAAzC,GACL,CAAC,EAAC+C,OAAMlE,MAAMC,QAAb,EAAuBoE,WAAUoC,QAAQpF,EAAzC,EAA6CwF,SAAQ5C,EAAE4C,OAAvD,EAAD,EACC,EAAC3C,OAAMlE,MAAMK,WAAb,EAA0BgB,IAAG4C,EAAE4C,OAA/B,EADD,CADK,GAGL,EAHF;AAID,CALD;;AAOA,IAAIE,wBAAwB,SAAxBA,qBAAwB,CAACN,OAAD,EAAa;AACvC,SAAQA,QAAQlF,CAAR,IAAa,CAAd,GACL,CAAC,EAAC2C,OAAMlE,MAAME,OAAb,EAAsBmE,WAAUoC,QAAQpF,EAAxC,EAAD,CADK,GAEL,EAFF;AAGD,CAJD;;AAMA,IAAI2F,mBAAmB,SAAnBA,gBAAmB,CAACzD,QAAD,EAAWoB,WAAX;AAAA,SACrBqB,iBAAiBzC,QAAjB,EAA2BxB,QAAQF,OAAnC,EAA4C8C,WAA5C,EAAyDzC,WAAWL,OAApE,EACGoD,MADH,CACU,UAACC,GAAD,EAAMoB,YAAN;AAAA,WAAuBpB,IAAIC,MAAJ,CAAW,CACxC,EAACjB,OAAMlE,MAAMG,IAAb,EAAmBkE,WAAUiC,aAAaD,GAA1C,EADwC,EAExC,EAACnC,OAAMlE,MAAMI,gBAAb,EAA+BiB,IAAGiF,aAAaC,GAA/C,EAFwC,CAAX,CAAvB;AAAA,GADV,EAIM,EAJN,CADqB;AAAA,CAAvB;;AAOA,IAAIU,4BAA4B,SAA5BA,yBAA4B,CAAClE,MAAD,EAAS4B,WAAT;AAAA,SAC9BqB,iBAAiB,CAACjD,MAAD,CAAjB,EAA2BrB,OAAOG,OAAlC,EAA2C8C,WAA3C,EAAwDzC,WAAWL,OAAnE,EACG4B,GADH,CACO;AAAA,WAAiB,EAACS,OAAMlE,MAAMM,UAAb,EAAjB;AAAA,GADP,CAD8B;AAAA,CAAhC;;AAIA,IAAI4G,yBAAyB,SAAzBA,sBAAyB,CAACnE,MAAD,EAASQ,QAAT;AAAA,SAC3ByC,iBAAiB,CAACjD,MAAD,CAAjB,EAA2BrB,OAAOG,OAAlC,EAA2C0B,QAA3C,EAAqDxB,QAAQF,OAA7D,EACG4B,GADH,CACO;AAAA,WAAiB,EAACS,OAAMlE,MAAMM,UAAb,EAAjB;AAAA,GADP,CAD2B;AAAA,CAA7B;;AAIA,IAAI6G,uBAAuB,SAAvBA,oBAAuB,CAACpE,MAAD,EAASyB,MAAT;AAAA,SACzBwB,iBAAiB,CAACjD,MAAD,CAAjB,EAA2BrB,OAAOG,OAAlC,EAA2C2C,MAA3C,EAAmDvC,MAAMJ,OAAzD,EACGoD,MADH,CACU,UAACC,GAAD,EAAMoB,YAAN;AAAA,WAAuBpB,IAAIC,MAAJ,CAAW,CACxC,EAACjB,OAAMlE,MAAMO,cAAb,EADwC,EAExC,EAAC2D,OAAMlE,MAAMK,WAAb,EAA0BgB,IAAGiF,aAAaC,GAA1C,EAFwC,CAAX,CAAvB;AAAA,GADV,EAIM,EAJN,CADyB;AAAA,CAA3B;;AAQA,IAAIa,mBAAmB,SAAnBA,gBAAmB,CAACzC,WAAD,EAAcX,CAAd;AAAA,SACrBW,YAAYwB,MAAZ,CAAmB;AAAA,WAAMnC,IAAIqD,EAAElF,SAAP,GAAoBnB,kBAAzB;AAAA,GAAnB,EACGyC,GADH,CACO;AAAA,WAAM,EAACS,OAAMlE,MAAMI,gBAAb,EAA+BiB,IAAGgG,EAAEhG,EAApC,EAAN;AAAA,GADP,CADqB;AAAA,CAAvB;;AAKA,IAAIiG,UAAU,SAAVA,OAAU,KAAM;AAClB,MAAIC,KAAK7E,GAAGpB,CAAH,GAAOkG,OAAhB;AACAD,QAAMtG,OAAOC,SAAP,GAAmB,CAAzB;;AAEA,MAAIuG,KAAK/E,GAAGnB,CAAZ;;AAEA,SAAO,EAACF,IAAGqB,GAAGrB,EAAP,EAAWkG,IAAGA,EAAd,EAAkBE,IAAGA,EAArB,EAAyBC,UAAShF,GAAGpB,CAArC,EAAP;AACD,CAPD;;AASA,IAAIqG,OAAO,SAAPA,IAAO;AAAA,SAAYC,QAAQL,EAAR,IAAc,CAAf,IAAsBK,QAAQH,EAAR,GAAaxG,OAAOC,SAArD;AAAA,CAAX;;AAEA,IAAI2G,SAAS,SAATA,MAAS,CAACC,OAAD,EAAUzG,EAAV,EAAc0G,QAAd,EAA2B;AACtC,MAAIC,IAAIF,QAAQ1D,SAAR,CAAkB;AAAA,WAAK4D,EAAE3G,EAAF,IAAQA,EAAb;AAAA,GAAlB,CAAR;AACAyG,UAAQG,MAAR,CAAeD,CAAf,EAAkB,CAAlB;AACAD,WAASG,MAAT,CAAgB7G,EAAhB;AACD,CAJD;;AAQA,IAAI8G,WAAW,SAAXA,QAAW,CAACC,CAAD,EAAIC,CAAJ;AAAA,SAAUC,MAAMF,CAAN,EAASG,IAAT,GAAgB9E,GAAhB,CAAoB4E,CAApB,CAAV;AAAA,CAAf;;AAGA,IAAIb,UAAU,CAAd;AACA,IAAIgB,gBAAgB,CAApB;AACA,IAAIC,WAAW,CAAf;AACA,IAAIpE,YAAY,GAAhB;AACA,IAAItB,SAAS,IAAIrB,MAAJ,CAAW+G,QAAX,EAAqB,CAArB,EAAwB,KAAK,CAA7B,EAAgCrJ,YAAYI,SAA5C,EAAuD,CAAvD,CAAb;AACA,IAAI+D,WAAW4E,SAAS,EAAT,EAAa;AAAA,SAAK,IAAIpG,OAAJ,CAAYsC,WAAZ,EAAyB,CAACjB,KAAKC,MAAL,KAAgB,GAAjB,IAAwBzC,QAAjD,EAA2D,KAAK,CAAhE,EAAmElB,aAAaC,OAAhF,EAAyF,CAAzF,CAAL;AAAA,CAAb,CAAf;AACA,IAAIkH,UAAU,GAAd;AACA,IAAIrC,SAAS2D,SAAS,EAAT,EAAa;AAAA,SAAK,IAAIlG,KAAJ,CAAU4E,SAAV,EAAqB,CAACzD,KAAKC,MAAL,KAAgB,GAAjB,IAAwBzC,QAA7C,EAAuD,EAAvD,EAA2D,OAAOwC,KAAKC,MAAL,KAAgB,GAAvB,CAA3D,CAAL;AAAA,CAAb,CAAb;AACA,IAAIqF,eAAe,GAAnB;AACA,IAAI/D,cAAc,EAAlB;AACA,IAAIgE,sBAAsB,IAA1B;AACA,IAAIC,qBAAqB,EAAzB;AACA,IAAIC,YAAYV,SAAS,EAAT,EAAa;AAAA,SAAK,IAAI9F,IAAJ,CAAS,IAAT,EAAe,CAACe,KAAKC,MAAL,KAAgB,GAAjB,IAAwBvC,YAAvC,EAAqDsC,KAAKC,MAAL,KAAgB,EAArE,EAA0ED,KAAKC,MAAL,KAAgB,GAAjB,GAAwB,GAAjG,CAAL;AAAA,CAAb,CAAhB;AACA,IAAI0E,WAAW,IAAIe,GAAJ,EAAf;AACA,IAAItF,iBAAiB,IAAIsF,GAAJ,EAArB;AACA,IAAIC,QAAQ,CAAZ;;AAEA,IAAIC,SAAS,SAATA,MAAS,CAACC,YAAD,EAAe/H,SAAf,EAA0BC,UAA1B,EAAsCwB,KAAtC,EAA6CqB,CAA7C,EAAkE;AAAA,MAAlBkF,KAAkB,uEAAV,KAAU;;;AAE7EjI,SAAOC,SAAP,GAAmBA,SAAnB;AACAD,SAAOE,UAAP,GAAoBA,UAApB;;AAEA,MAAGwB,MAAMwG,IAAT,EAAe;AACbxE,gBAAYyE,IAAZ,CAAiB,IAAIlH,UAAJ,CAAewG,cAAf,EAA+B3F,OAAOzB,CAAtC,EAAyCyB,OAAOxB,CAAP,GAAS,CAAlD,EAAsDwB,OAAOpB,KAAP,IAAgBvC,YAAYG,QAA7B,GAAyC,CAAC,CAA1C,GAA8C,CAAnG,EAAsG,CAAtG,EAAyGyE,CAAzG,CAAjB;AACA,QAAG0E,gBAAgB,IAAnB,EAAyBA,eAAe,GAAf;AAC1B;;AAED,MAAIW,kBAAkB9F,SAAS4C,MAAT,CAAgB;AAAA,WAAKzC,EAAE/B,KAAF,IAAWjC,aAAaC,OAA7B;AAAA,GAAhB,CAAtB;AACA,MAAI2J,iBAAiB/F,SAAS4C,MAAT,CAAgB;AAAA,WAAKzC,EAAE/B,KAAF,IAAWjC,aAAaE,MAA7B;AAAA,GAAhB,CAArB;AACA,MAAI2J,oBAAoBhG,SAAS4C,MAAT,CAAgB;AAAA,WAAKzC,EAAE/B,KAAF,IAAWjC,aAAaG,SAA7B;AAAA,GAAhB,CAAxB;AACA,MAAI2J,iBAAiBjG,SAAS4C,MAAT,CAAgB;AAAA,WAAKzC,EAAE/B,KAAF,IAAWjC,aAAaI,MAA7B;AAAA,GAAhB,CAArB;;AAEAuJ,kBAAgB5F,GAAhB,CAAoB,aAAK;AACvB,QAAGL,KAAKC,MAAL,KAAgB,IAAnB,EAAyB;AACvBuF,yBAAmBQ,IAAnB,CAAwB,IAAIlH,UAAJ,CAAeyG,qBAAf,EAAsCjF,EAAEpC,CAAxC,EAA2CoC,EAAEnC,CAA7C,EAAgD6B,KAAKC,MAAL,KAAgB,GAAhE,EAAqED,KAAKC,MAAL,KAAgB,GAArF,EAA0FW,CAA1F,CAAxB;AACD;AACF,GAJD;;AAMAwF,iBAAe/F,GAAf,CAAmB,aAAK;AACtB,QAAGL,KAAKC,MAAL,KAAgB,GAAnB,EAAwB;AACtBuF,yBAAmBQ,IAAnB,CAAwB,IAAIlH,UAAJ,CAAeyG,qBAAf,EAAsCjF,EAAEpC,CAAxC,EAA2CoC,EAAEnC,CAA7C,EAAgD6B,KAAKC,MAAL,KAAgB,GAAhE,EAAqED,KAAKC,MAAL,KAAgB,GAArF,EAA0FW,CAA1F,CAAxB;AACD;AACF,GAJD;;AAMA,MAAG2E,uBAAuB,IAA1B,EAAgCA,sBAAsB,IAAtB;AAChC,MAAGC,mBAAmBhC,MAAnB,GAA4B,EAA/B,EAAmCiB,OAAOe,kBAAP,EAA2BA,mBAAmB,CAAnB,EAAsBvH,EAAjD,EAAqD0G,QAArD;;AAGnC,MAAI0B,mBAAmBrC,iBAAiBzC,WAAjB,EAA8BX,CAA9B,CAAvB;;AAEA,MAAI0F,YAAY1C,iBAAiBzD,QAAjB,EAA2BoB,WAA3B,CAAhB;;AAEA,MAAIgF,2BAA2B1C,0BAA0BlE,MAA1B,EAAkC6F,kBAAlC,CAA/B;AACA,MAAIgB,wBAAwB3C,0BAA0BlE,MAA1B,EAAkCQ,QAAlC,CAA5B;AACA,MAAIsG,sBAAsB1C,qBAAqBpE,MAArB,EAA6ByB,MAA7B,CAA1B;;AAEA,MAAIsF,uBAAuBT,gBAAgBpE,MAAhB,CAAuB,UAACC,GAAD,EAAMxB,CAAN;AAAA,WAAYwB,IAAIC,MAAJ,CAAWqB,oBAAoB9C,CAApB,EAAuBc,MAAvB,CAAX,CAAZ;AAAA,GAAvB,EAA+E,EAA/E,CAA3B;AACA,MAAIuF,sBAAsBT,eAAerE,MAAf,CAAsB,UAACC,GAAD,EAAMxB,CAAN;AAAA,WAAYwB,IAAIC,MAAJ,CAAW2B,mBAAmBpD,CAAnB,EAAsBF,eAAeI,GAAf,CAAmBF,EAAErC,EAArB,CAAtB,CAAX,CAAZ;AAAA,GAAtB,EAA+F,EAA/F,CAA1B;AACA,MAAI2I,yBAAyBT,kBAAkBtE,MAAlB,CAAyB,UAACC,GAAD,EAAMxB,CAAN;AAAA,WAAYwB,IAAIC,MAAJ,CAAW4B,sBAAsBrD,CAAtB,CAAX,CAAZ;AAAA,GAAzB,EAA2E,EAA3E,CAA7B;;AAEA,MAAIuG,gBAAgB,GAAG9E,MAAH,CAAUuE,SAAV,EAAqBI,oBAArB,EAA2CC,mBAA3C,EAAgEC,sBAAhE,CAApB;;AAEA,MAAIE,YAAY,GAAG/E,MAAH,CAAUsE,gBAAV,EAA4BE,wBAA5B,EAAsDC,qBAAtD,EAA6EC,mBAA7E,EAAkGI,aAAlG,CAAhB;AACAC,YAAU/D,MAAV,CAAiB;AAAA,WAAKlC,EAAEC,KAAF,IAAWlE,MAAMI,gBAAtB;AAAA,GAAjB,EAAyDqD,GAAzD,CAA6D;AAAA,WAAKoE,OAAOlD,WAAP,EAAoBV,EAAE5C,EAAtB,EAA0B0G,QAA1B,CAAL;AAAA,GAA7D;AACAmC,YAAU/D,MAAV,CAAiB;AAAA,WAAKlC,EAAEC,KAAF,IAAWlE,MAAMJ,MAAtB;AAAA,GAAjB,EAA+C6D,GAA/C,CAAmD;AAAA,WAAKD,eAAe2G,GAAf,CAAmBlG,EAAEI,SAArB,EAAgCJ,CAAhC,CAAL;AAAA,GAAnD;AACAiG,YAAU/D,MAAV,CAAiB;AAAA,WAAKlC,EAAEC,KAAF,IAAWlE,MAAMK,WAAtB;AAAA,GAAjB,EAAoDoD,GAApD,CAAwD;AAAA,WAAKoE,OAAOrD,MAAP,EAAeP,EAAE5C,EAAjB,EAAqB0G,QAArB,CAAL;AAAA,GAAxD;AACAmC,YAAU/D,MAAV,CAAiB;AAAA,WAAKlC,EAAEC,KAAF,IAAWlE,MAAMM,UAAtB;AAAA,GAAjB,EAAmDmD,GAAnD,CAAuD;AAAA,WAAK2G,WAAL;AAAA,GAAvD;AACAF,YAAU/D,MAAV,CAAiB;AAAA,WAAKlC,EAAEC,KAAF,IAAWlE,MAAMO,cAAtB;AAAA,GAAjB,EAAuDkD,GAAvD,CAA2D,aAAK;AAACsF,aAAS,KAAT;AAAgB,GAAjF;;AAGAhB,WAASoC,GAAT,CAAapH,OAAO1B,EAApB,EAAyB0B,OAAOpB,KAAP,IAAgBvC,YAAYG,QAA7B,GAAyCmC,OAAOI,OAAP,CAAe,CAAf,CAAzC,GAA6DJ,OAAOI,OAAP,CAAe,CAAf,CAArF;;AAEAyB,WAASE,GAAT,CAAa,aAAK;AAChB,QAAI4G,IAAK3G,EAAE/B,KAAF,IAAWjC,aAAaG,SAAzB,GAAsCkC,QAAQC,gBAA9C,GAAiED,QAAQD,OAAjF;AACAiG,aAASoC,GAAT,CAAazG,EAAErC,EAAf,EAAmBgJ,CAAnB;AACD,GAHD;AAIA7F,SAAOf,GAAP,CAAW;AAAA,WAAKsE,SAASoC,GAAT,CAAaxD,EAAEtF,EAAf,EAAmBY,MAAMH,OAAzB,CAAL;AAAA,GAAX;AACA6C,cAAYlB,GAAZ,CAAgB;AAAA,WAAKsE,SAASoC,GAAT,CAAa9C,EAAEhG,EAAf,EAAmBa,WAAWJ,OAA9B,CAAL;AAAA,GAAhB;AACA8G,qBAAmBnF,GAAnB,CAAuB;AAAA,WAAKsE,SAASoC,GAAT,CAAa9C,EAAEhG,EAAf,EAAmBa,WAAWE,QAA9B,CAAL;AAAA,GAAvB;AACAyG,YAAUpF,GAAV,CAAc;AAAA,WAAKsE,SAASoC,GAAT,CAAaG,EAAEjJ,EAAf,EAAmBgB,KAAKP,OAAxB,CAAL;AAAA,GAAd;;AAGA;AACAgB,oBAAkBC,MAAlB,EAA0BJ,KAA1B;AACAmB,qBAAmBP,QAAnB,EAA6B0G,aAA7B,EAA4CjG,CAA5C;;AAEAvB,uBAAqBM,MAArB,EAA6BJ,KAA7B;AACAW,iBAAeC,QAAf,EAAyBC,cAAzB,EAAyCT,MAAzC;AACAwB,eAAaC,MAAb;AACAE,oBAAkBC,WAAlB;AACAD,oBAAkBkE,kBAAlB;AACA;;AAEA;;AAEA;AACArF,WAAS4C,MAAT,CAAgB;AAAA,WAAKzC,EAAE/B,KAAF,IAAWjC,aAAaK,qBAAxB,IAAiD2D,EAAE9B,YAAF,IAAkBoC,CAAxE;AAAA,GAAhB,EACGP,GADH,CACO;AAAA,WAAKe,OAAO4E,IAAP,CAAY,IAAInH,KAAJ,CAAU4E,SAAV,EAAqBnD,EAAEpC,CAAF,GAAI,CAAzB,EAA4BoC,EAAEnC,CAA9B,EAAiC,CAAjC,EAAoC,GAApC,CAAZ,CAAL;AAAA,GADP;;AAGAgC,WAAS4C,MAAT,CAAgB;AAAA,WAAKzC,EAAE/B,KAAF,IAAWjC,aAAaK,qBAAxB,IAAiD2D,EAAE/B,KAAF,IAAWjC,aAAaD,SAAxB,IAAqCiE,EAAE9B,YAAF,IAAkBoC,CAA7G;AAAA,GAAhB,EACGP,GADH,CACO;AAAA,WAAKoE,OAAOtE,QAAP,EAAiBG,EAAErC,EAAnB,EAAuB0G,QAAvB,CAAL;AAAA,GADP;;AAIA,MAAIwC,mBAAmB,GAAGpF,MAAH,CAAU5B,QAAV,EAAoBiB,MAApB,EAA4BG,WAA5B,EAAyCiE,kBAAzC,CAAvB;;AAEA,MAAI4B,eAAezH,OAAOvB,IAA1B;AACA+I,mBAAiB9G,GAAjB,CAAqB,aAAK;AAACuE,MAAE1G,CAAF,GAAMiB,MAAMyF,EAAE1G,CAAF,GAAMkJ,YAAZ,CAAN;AAAgC,GAA3D;;AAEA3B,YAAUpF,GAAV,CAAc,aAAK;AAACuE,MAAE1G,CAAF,GAAMkB,UAAUwF,EAAE1G,CAAF,GAAOkJ,eAAexC,EAAE1F,KAAlC,CAAN;AAAgD,GAApE;;AAEA,MAAImI,cAAc,GAAGtF,MAAH,CAAU0D,SAAV,EAAqB0B,gBAArB,EAAuCxH,MAAvC,CAAlB;;AAEA0H,cACGhH,GADH,CACO6D,OADP,EAEGnB,MAFH,CAEUwB,IAFV,EAGGlE,GAHH,CAGO,aAAK;AACRwF,iBAAayB,SAAb,CAAuBtH,KAAKuH,KAAL,CAAWjH,EAAE6D,EAAb,CAAvB,EAAyCnE,KAAKuH,KAAL,CAAWjH,EAAE+D,EAAb,CAAzC,EAA2DM,SAASpE,GAAT,CAAaD,EAAErC,EAAf,IAAqB0G,SAASnE,GAAT,CAAaF,EAAErC,EAAf,CAArB,GAA0C,GAArG;AACA,QAAG6H,KAAH,EAAU;AACR;AACAD,mBAAa2B,SAAb,CAAuBxH,KAAKuH,KAAL,CAAWjH,EAAE6D,EAAF,GAAK,CAAhB,CAAvB,EAA2CnE,KAAKuH,KAAL,CAAWjH,EAAE+D,EAAb,CAA3C,EAA6D/D,EAAErC,EAA/D;AACA4H,mBAAa2B,SAAb,CAAuBxH,KAAKuH,KAAL,CAAWjH,EAAE6D,EAAb,CAAvB,EAAyCnE,KAAKuH,KAAL,CAAWjH,EAAE+D,EAAF,GAAK,CAAhB,CAAzC,EAA6DrE,KAAKuH,KAAL,CAAWjH,EAAEgE,QAAb,CAA7D;AACD;AACF,GAVH;;AAYAuB,eAAayB,SAAb,CAAuB,EAAvB,EAA2B,CAA3B,EAA8B,SAA9B;AACAzB,eAAa2B,SAAb,CAAuB,EAAvB,EAA2B,CAA3B,EAA8B7B,KAA9B;;AAEChG,SAAOpB,KAAP,IAAgBvC,YAAYG,QAA7B,GAAyCiJ,gBAAgB,CAAE,EAA3D,GAAgEA,gBAAgB,EAAhF;AACAhB,aAAWhH,UAAUgI,gBAAgBhB,OAA1B,CAAX;AACD,CAhHD","file":"es6-defender.min.js","sourcesContent":["\nlet PlayerState = Object.freeze({faceLeft:1, faceRight:2, exploding:3})\n\nlet InvaderState = Object.freeze({seeking:1, locked:2, abducting:3, mutant:4, exploding:5, explodingReleaseHuman:6})\n\nlet Event = Object.freeze({locked:1, abducted:2, mutated:3, dead:4, removeProjectile:5, removeHuman:6, playerDead:7, collectedHuman:8})\n\nlet easing = 0.05;\nlet playerXAccel = 0.8;\nlet playerYAccel = 0.4;\nlet playerDamping = 0.2;\nlet modulusx = 512;\nlet halfmodulusx = modulusx / 2;\nlet starmodulusx = 256;\nlet halfstarmodulusx = starmodulusx / 2;\nlet projectileLifetime = 50;\n\nlet Global = {viewWidth:0, viewHeight:0};\n\nclass StateVector {\n  \n  constructor(id, x, y, xdot = 0, ydot = 0) {\n    this.id = id;\n    this.x = x;\n    this.y = y;\n    this.xdot = xdot;\n    this.ydot = ydot;\n  }\n}\n\nclass Player extends StateVector {\n\n  constructor(id, x, y, state, t_startState) {\n    super(id, x, y);\n\n    this.state = state;\n    this.t_startState = t_startState;\n  }\n}\n\nPlayer.sideLen = 3;\nPlayer.graphic = ['  /\\n<--', '\\\\  \\n-->']; \n\nclass Invader extends StateVector {\n  \n  constructor(id, x, y, state, t_startState) {\n    super(id, x, y);\n\n    this.state = state;\n    this.t_startState = t_startState;\n  }\n}\n\nInvader.sideLen = 4;\nInvader.graphic = '^^^^\\n[[]]\\n[[]]\\n[[]]';\nInvader.graphicAbducting = '^^^^\\n[[]]\\n[[]]\\n[[]]\\n HH \\n HH';\n\nclass Human extends StateVector {\n\n  constructor(id, x, y, xdot, ydot) {\n    super(id, x, y, xdot, ydot);\n  }\n}\n\nHuman.sideLen = 2;\nHuman.graphic = 'HH\\nHH';\n\nclass Projectile extends StateVector {\n\n  constructor(id, x, y, xdot, ydot, t_spawned) {\n    super(id, x, y, xdot, ydot);\n\n    this.t_spawned = t_spawned;\n  }\n}\n\nProjectile.sideLen = 2;\nProjectile.graphic = '--';\nProjectile.graphic2 = '**\\n**';\n\nclass Star extends StateVector {\n\n  constructor(id, x, y, depth) {\n    super(id, x, y);\n\n    this.depth = depth;\n  }\n}\n\nStar.graphic = '.';\n\n\nlet wrapx = (x) => {\n  if(x < -halfmodulusx) x += modulusx;\n  else if(x >= halfmodulusx) x -= modulusx;\n  return x;\n}\n\nlet wrapstarx = (x) => {\n  if(x < -halfstarmodulusx) x += starmodulusx;\n  else if(x >= halfstarmodulusx) x -= starmodulusx;\n  return x;\n}\n\nlet updatePlayerPosition = (sv, input) => {\n  sv.xdot += playerXAccel * input.leftright;\n  sv.ydot += playerYAccel * input.updown;\n\n  sv.xdot += playerDamping * -sv.xdot;\n  sv.ydot += playerDamping * -sv.ydot;\n\n  sv.x = 0;\n  sv.y += sv.ydot;\n\n  if(sv.y < 0) sv.y = 0;\n  if(sv.y > Global.viewHeight - 5) sv.y = Global.viewHeight - 5;\n\n  return sv;\n}\n\nlet updatePlayerState = (player, input) => {\n  if(input.leftright != 0) {\n    player.state = (input.leftright == -1) ? PlayerState.faceLeft : PlayerState.faceRight;\n  }\n}\n\nlet updateInvaderPosition = (sv, state, targetx, targety) => {\n  let a = {\n      [InvaderState.seeking]: () => {\n        sv.xdot += 0.02 * (Math.random() - 0.5);\n        sv.ydot += 0.02 * (Math.random() - 0.5);\n        sv.x += sv.xdot;\n        sv.y += sv.ydot;\n\n        if(sv.y < 5) { sv.ydot = -sv.ydot; sv.y = 5; }\n        if(sv.y > (Global.viewHeight - 5)) { sv.ydot = -sv.ydot; sv.y = (Global.viewHeight - 5); }\n      },\n      [InvaderState.locked]: () => {\n        sv.xdot = targetx;\n        sv.ydot = 0.2;\n\n        sv.x += sv.xdot;\n        sv.y += sv.ydot;\n      },\n      [InvaderState.abducting]: () => {\n        sv.ydot = -0.2;\n\n        sv.y += sv.ydot;\n      },\n      [InvaderState.mutant]: () => {\n        sv.x += 0.02 * (targetx - sv.x) + 3 * (Math.random() - 0.5);\n        sv.y += 0.02 * (targety - sv.y);\n      },\n      [InvaderState.exploding]: () => {\n      },\n      [InvaderState.explodingReleaseHuman]: () => {\n      }\n    }[state]();\n\n  return sv;\n}\n\nlet updateInvaders = (invaders, invaderTargets, player) =>\n  invaders.map(i => {\n    let targetx = 0, targety = 0;\n    if(i.state == InvaderState.mutant) {\n      targetx = player.x;\n      targety = player.y;\n    }\n    else if(invaderTargets.has(i.id)) {\n      targetx = invaderTargets.get(i.id).humanXDot;\n    }\n    updateInvaderPosition(i, i.state, targetx, targety);\n  });\n\nlet updateInvaderState = (invaders, events, t) => {\n  events.map(e => {\n    if(e.event == Event.locked || e.event == Event.abducted || e.event == Event.dead || e.event == Event.mutated)\n    {\n      let idx = invaders.findIndex(i => i.id == e.invaderId);\n      let i = invaders[idx];\n      i.state = {\n        [Event.locked]: InvaderState.locked,\n        [Event.abducted]: InvaderState.abducting,\n        [Event.mutated]: InvaderState.mutant,\n        [Event.dead]: i.state == InvaderState.abducting ? InvaderState.explodingReleaseHuman : InvaderState.exploding\n      }[e.event];\n      i.t_startState = t;      \n    }\n  })\n}\n\nlet updateHumanPosition = (sv) => {\n  sv.x += sv.xdot;\n  sv.y += sv.ydot;\n\n  return sv;\n}\n\nlet updateHumans = (humans) => humans.map(updateHumanPosition);\n\nlet updateProjectilePosition = (sv) => {\n  sv.x += sv.xdot;\n  sv.y += sv.ydot;\n\n  return sv;\n}\n\nlet updateProjectiles = (projectiles) => projectiles.map(updateProjectilePosition);\n\nlet cartesianProduct2 = (arr1, arr2) =>\n  arr1.map(e1 => arr2.map(e2 => [e1, e2])).reduce((arr, e) => arr.concat(e), []);\n\nlet toTuples = (arr) =>\n  arr.map(a => ({fst:a[0], snd:a[1]}));\n\n\nlet xoverlap = (x1, size1, x2, size2) =>\n  (x2 < (x1 + size1) &&\n   x1 < (x2 + size2));\n\nlet yoverlap = (y1, size1, y2, size2) =>\n  (y2 < (y1 + size1) &&\n   y1 < (y2 + size2));\n\nlet collided = ({x:x1, y:y1}, size1, {x:x2, y:y2}, size2) =>\n  (xoverlap(x1, size1, x2, size2) && yoverlap(y1, size1, y2, size2));\n\n\nlet detectCollisions = (svArr1, size1, svArr2, size2) =>\n  toTuples(cartesianProduct2(svArr1, svArr2))\n    .filter(svPair => collided(svPair.fst, size1, svPair.snd, size2))\n    .map(collidedPair => ({id1:collidedPair.fst.id, id2:collidedPair.snd.id}));\n\nlet checkSeekingInvader = (invader, humans) => {\n  let inRangeHumans = humans.filter(h => xoverlap(invader.x, Invader.sideLen, h.x, Human.sideLen));\n  if(inRangeHumans.length > 0) {\n    if(Math.random() < 0.1) {\n      return [{event:Event.locked, invaderId:invader.id, humanId:inRangeHumans[0].id, humanXDot:inRangeHumans[0].xdot}];\n    }\n  }\n  return [];\n}\n\nlet checkLockedInvader = (invader, e) => {\n  return ((invader.y + Invader.sideLen) >= Global.viewHeight) ?\n    [{event:Event.abducted, invaderId:invader.id, humanId:e.humanId},\n     {event:Event.removeHuman, id:e.humanId}] :\n    [];\n}\n\nlet checkAbductingInvader = (invader) => {\n  return (invader.y <= 0) ?\n    [{event:Event.mutated, invaderId:invader.id}] :\n    [];\n}\n\nlet checkHitInvaders = (invaders, projectiles) =>\n  detectCollisions(invaders, Invader.sideLen, projectiles, Projectile.sideLen)\n    .reduce((arr, collidedPair) => arr.concat([\n      {event:Event.dead, invaderId:collidedPair.id1},\n      {event:Event.removeProjectile, id:collidedPair.id2}\n    ]), []);\n\nlet checkHitPlayerProjectiles = (player, projectiles) =>\n  detectCollisions([player], Player.sideLen, projectiles, Projectile.sideLen)\n    .map(collidedPair => ({event:Event.playerDead}));\n\nlet checkHitPlayerInvaders = (player, invaders) =>\n  detectCollisions([player], Player.sideLen, invaders, Invader.sideLen)\n    .map(collidedPair => ({event:Event.playerDead}));\n\nlet checkHitPlayerHumans = (player, humans) =>\n  detectCollisions([player], Player.sideLen, humans, Human.sideLen)\n    .reduce((arr, collidedPair) => arr.concat([\n      {event:Event.collectedHuman},\n      {event:Event.removeHuman, id:collidedPair.id2}\n    ]), []);\n\n\nlet checkProjectiles = (projectiles, t) =>\n  projectiles.filter(p => (t - p.t_spawned) > projectileLifetime)\n    .map(p => ({event:Event.removeProjectile, id:p.id}));\n\n\nlet toLocal = sv => {\n  let lx = sv.x - offsetx;\n  lx += Global.viewWidth / 2;\n\n  let ly = sv.y;\n\n  return {id:sv.id, lx:lx, ly:ly, gx_debug:sv.x};\n}\n\nlet clip = lcoords => (lcoords.lx >= 0) && (lcoords.ly < Global.viewWidth);\n\nlet remove = (objects, id, graphics) => {\n  let o = objects.findIndex(o => o.id == id);\n  objects.splice(o, 1);\n  graphics.delete(id);\n}\n\n\n\nlet fillWith = (n, f) => Array(n).fill().map(f);\n\n\nlet offsetx = 0;\nlet targetoffsetx = 0;\nlet playerId = 1;\nlet invaderId = 100;\nlet player = new Player(playerId, 0, 96 / 2, PlayerState.faceRight, 0);\nlet invaders = fillWith(10, _ => new Invader(invaderId++, (Math.random() - 0.5) * modulusx, 96 / 2, InvaderState.seeking, 0));\nlet humanId = 200;\nlet humans = fillWith(10, _ => new Human(humanId++, (Math.random() - 0.5) * modulusx, 94, 0.2 * (Math.random() - 0.5)));\nlet projectileId = 500;\nlet projectiles = [];\nlet invaderProjectileId = 1000;\nlet invaderProjectiles = [];\nlet starfield = fillWith(50, _ => new Star(2000, (Math.random() - 0.5) * starmodulusx, Math.random() * 96, (Math.random() * 0.5) + 0.5));\nlet graphics = new Map();\nlet invaderTargets = new Map();\nlet score = 0;\n\nlet doGame = (fastTextMode, viewWidth, viewHeight, input, t, debug = false) => {\n\n  Global.viewWidth = viewWidth;\n  Global.viewHeight = viewHeight;\n\n  if(input.fire) {\n    projectiles.push(new Projectile(projectileId++, player.x, player.y+1, (player.state == PlayerState.faceLeft) ? -4 : 4, 0, t));\n    if(projectileId >= 1000) projectileId = 500;\n  }\n\n  let seekingInvaders = invaders.filter(i => i.state == InvaderState.seeking);\n  let lockedInvaders = invaders.filter(i => i.state == InvaderState.locked);\n  let abductingInvaders = invaders.filter(i => i.state == InvaderState.abducting);\n  let mutantInvaders = invaders.filter(i => i.state == InvaderState.mutant);\n\n  seekingInvaders.map(i => {\n    if(Math.random() < 0.01) {\n      invaderProjectiles.push(new Projectile(invaderProjectileId++, i.x, i.y, Math.random() - 0.5, Math.random() - 0.5, t));\n    }\n  });\n\n  mutantInvaders.map(i => {\n    if(Math.random() < 0.1) {\n      invaderProjectiles.push(new Projectile(invaderProjectileId++, i.x, i.y, Math.random() - 0.5, Math.random() - 0.5, t));\n    }\n  });\n\n  if(invaderProjectileId >= 1500) invaderProjectileId = 1000;\n  if(invaderProjectiles.length > 30) remove(invaderProjectiles, invaderProjectiles[0].id, graphics);\n\n\n  let projectileEvents = checkProjectiles(projectiles, t);\n\n  let hitEvents = checkHitInvaders(invaders, projectiles);\n\n  let playerProjectileHitEvent = checkHitPlayerProjectiles(player, invaderProjectiles);\n  let playerInvaderHitEvent = checkHitPlayerProjectiles(player, invaders);\n  let playerHumanHitEvent = checkHitPlayerHumans(player, humans);\n\n  let seekingInvaderEvents = seekingInvaders.reduce((arr, i) => arr.concat(checkSeekingInvader(i, humans)), []);\n  let lockedInvaderEvents = lockedInvaders.reduce((arr, i) => arr.concat(checkLockedInvader(i, invaderTargets.get(i.id))), []);\n  let abductingInvaderEvents = abductingInvaders.reduce((arr, i) => arr.concat(checkAbductingInvader(i)), []);\n\n  let invaderEvents = [].concat(hitEvents, seekingInvaderEvents, lockedInvaderEvents, abductingInvaderEvents);\n\n  let allEvents = [].concat(projectileEvents, playerProjectileHitEvent, playerInvaderHitEvent, playerHumanHitEvent, invaderEvents);\n  allEvents.filter(e => e.event == Event.removeProjectile).map(e => remove(projectiles, e.id, graphics));\n  allEvents.filter(e => e.event == Event.locked).map(e => invaderTargets.set(e.invaderId, e));\n  allEvents.filter(e => e.event == Event.removeHuman).map(e => remove(humans, e.id, graphics));\n  allEvents.filter(e => e.event == Event.playerDead).map(e => eiofjeiof());\n  allEvents.filter(e => e.event == Event.collectedHuman).map(_ => {score += 20000;});\n\n\n  graphics.set(player.id, (player.state == PlayerState.faceLeft) ? Player.graphic[0] : Player.graphic[1]);\n\n  invaders.map(i => {\n    let g = (i.state == InvaderState.abducting) ? Invader.graphicAbducting : Invader.graphic;\n    graphics.set(i.id, g);\n  });\n  humans.map(h => graphics.set(h.id, Human.graphic));\n  projectiles.map(p => graphics.set(p.id, Projectile.graphic));\n  invaderProjectiles.map(p => graphics.set(p.id, Projectile.graphic2));\n  starfield.map(s => graphics.set(s.id, Star.graphic));\n\n\n  // non-functional code section. game objects are updated 'in-place'\n  updatePlayerState(player, input);\n  updateInvaderState(invaders, invaderEvents, t);\n\n  updatePlayerPosition(player, input);\n  updateInvaders(invaders, invaderTargets, player);\n  updateHumans(humans);\n  updateProjectiles(projectiles);\n  updateProjectiles(invaderProjectiles);\n  // end non-functional code section\n\n  // triggers based on state changes must be placed after state update code\n\n  // abducting invaders drop human when hit\n  invaders.filter(i => i.state == InvaderState.explodingReleaseHuman && i.t_startState == t)\n    .map(i => humans.push(new Human(humanId++, i.x+2, i.y, 0, 0.1)));\n\n  invaders.filter(i => i.state == InvaderState.explodingReleaseHuman || i.state == InvaderState.exploding && i.t_startState == t)\n    .map(i => remove(invaders, i.id, graphics));\n\n\n  let displacementList = [].concat(invaders, humans, projectiles, invaderProjectiles);\n\n  let displacement = player.xdot;\n  displacementList.map(o => {o.x = wrapx(o.x - displacement)});\n\n  starfield.map(o => {o.x = wrapstarx(o.x - (displacement * o.depth))});\n\n  let displayList = [].concat(starfield, displacementList, player);\n\n  displayList\n    .map(toLocal)\n    .filter(clip)\n    .map(i => {\n      fastTextMode.setString(Math.floor(i.lx), Math.floor(i.ly), graphics.has(i.id) ? graphics.get(i.id) : '!')\n      if(debug) {\n        // overlay object id and x coordinate\n        fastTextMode.setNumber(Math.floor(i.lx+3), Math.floor(i.ly), i.id)\n        fastTextMode.setNumber(Math.floor(i.lx), Math.floor(i.ly+4), Math.floor(i.gx_debug))\n      }\n    });\n\n  fastTextMode.setString(30, 2, 'Score: ');\n  fastTextMode.setNumber(37, 2, score);\n\n  (player.state == PlayerState.faceLeft) ? targetoffsetx = - 32 : targetoffsetx = 32;\n  offsetx += easing * (targetoffsetx - offsetx);\n}\n\n"]}