{"version":3,"sources":["es6-defender.js"],"names":["PlayerState","Object","freeze","faceLeft","faceRight","exploding","InvaderState","seeking","locked","abducting","mutant","Event","abducted","mutated","dead","remove","easing","playerAccel","playerDamping","halfmodulusx","modulusx","projectileLifetime","Global","viewWidth","viewHeight","StateVector","id","x","y","xdot","ydot","Player","state","t_startState","sideLen","graphic","Invader","Human","Projectile","t_spawned","wrapx","updatePlayerPosition","sv","input","leftright","updown","updatePlayerState","player","updateInvaderPosition","targetx","targety","Math","random","updateInvaders","invaders","map","i","updateHumanPosition","updateHumans","humans","updateProjectilePosition","updateProjectiles","projectiles","cartesianProduct2","arr1","arr2","e1","e2","reduce","arr","e","concat","toTuples","fst","a","snd","collided","size1","size2","x1","y1","x2","y2","detectCollisions","svArr1","svArr2","filter","svPair","id1","collidedPair","id2","checkSeekingInvaders","checkHitInvaders","event","checkProjectiles","t","p","toLocal","lx","offsetx","ly","gx_debug","clip","lcoords","objects","graphics","o","findIndex","splice","delete","initArray","n","f","Array","fill","targetoffsetx","playerId","invaderId","floor","humanId","projectileId","Map","doGame","fastTextMode","debug","fire","push","projectileEvents","pe","hits","length","set","h","displacementList","displacementx","displayList","setString","has","get","setNumber"],"mappings":"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","file":"es6-defender.min.js","sourcesContent":["\nlet PlayerState = Object.freeze({faceLeft:1, faceRight:2, exploding:3})\n\nlet InvaderState = Object.freeze({seeking:1, locked:2, abducting:3, mutant:4, exploding:5})\n\nlet Event = Object.freeze({locked:1, abducted:2, mutated:3, dead:4, remove:5})\n\nlet easing = 0.05;\nlet playerAccel = 0.15;\nlet playerDamping = 0.1;\nlet halfmodulusx = 256;\nlet modulusx = 512;\nlet projectileLifetime = 50;\n\nlet Global = {viewWidth:0, viewHeight:0};\n\nclass StateVector {\n  \n  constructor(id, x, y, xdot = 0, ydot = 0) {\n    this.id = id;\n    this.x = x;\n    this.y = y;\n    this.xdot = xdot;\n    this.ydot = ydot;\n  }\n}\n\nclass Player extends StateVector {\n\n  constructor(id, x, y, state, t_startState) {\n    super(id, x, y);\n\n    this.state = state;\n    this.t_startState = t_startState;\n  }\n}\n\nPlayer.sideLen = 3;\nPlayer.graphic = ['  /\\n<--', '\\\\  \\n-->']; \n\nclass Invader extends StateVector {\n  \n  constructor(id, x, y, state, t_startState) {\n    super(id, x, y);\n\n    this.state = state;\n    this.t_startState = t_startState;\n  }\n}\n\nInvader.sideLen = 2;\nInvader.graphic = '^^\\n[]\\n';\n\nclass Human extends StateVector {\n\n  constructor(id, x, y, xdot) {\n    super(id, x, y, xdot);\n  }\n}\n\nHuman.sideLen = 1;\nHuman.graphic = 'H';\n\nclass Projectile extends StateVector {\n\n  constructor(id, x, y, xdot, ydot, t_spawned) {\n    super(id, x, y, xdot, ydot);\n\n    this.t_spawned = t_spawned;\n  }\n}\n\nProjectile.sideLen = 1;\nProjectile.graphic = '-';\n\nlet wrapx = (x) => (x + modulusx) % modulusx;\n\nlet updatePlayerPosition = (sv, input) => {\n  sv.xdot += playerAccel * input.leftright;\n  sv.ydot += playerAccel * input.updown;\n\n  sv.xdot += playerDamping * -sv.xdot;\n  sv.ydot += playerDamping * -sv.ydot;\n\n  sv.x = halfmodulusx;\n  sv.y += sv.ydot;\n\n  if(sv.y < 0) sv.y = 0;\n  if(sv.y > Global.viewHeight - 5) sv.y = Global.viewHeight - 5;\n\n  return sv;\n}\n\nlet updatePlayerState = (player, input) => {\n  if(input.leftright != 0) {\n    player.state = (input.leftright == -1) ? PlayerState.faceLeft : PlayerState.faceRight;\n  }\n}\n\nlet updateInvaderPosition = (sv, state, targetx, targety) => {\n  switch(state) {\n    case InvaderState.seeking:\n      sv.xdot += 0.01 * (Math.random() - 0.5);\n      sv.ydot += 0.01 * (Math.random() - 0.5);\n      sv.x += sv.xdot;\n      sv.y += sv.ydot;\n\n      if(sv.y < 5) { sv.ydot = -sv.ydot; sv.y = 5; }\n      if(sv.y > (Global.viewHeight - 5)) { sv.ydot = -sv.ydot; sv.y = (Global.viewHeight - 5); }\n      break;\n  }\n\n  sv.x = wrapx(sv.x);\n\n  return sv;\n}\n\nlet updateInvaders = (invaders) => invaders.map(i => updateInvaderPosition(i, i.state, 0, 0));\n\nlet updateHumanPosition = (sv) => {\n  sv.x += sv.xdot;\n  sv.y += sv.ydot;\n\n  sv.x = wrapx(sv.x);\n\n  return sv;\n}\n\nlet updateHumans = (humans) => humans.map(updateHumanPosition);\n\nlet updateProjectilePosition = (sv) => {\n  sv.x += sv.xdot;\n  sv.y += sv.ydot;\n\n  sv.x = wrapx(sv.x);\n\n  return sv;\n}\n\nlet updateProjectiles = (projectiles) => projectiles.map(updateProjectilePosition);\n\nlet cartesianProduct2 = (arr1, arr2) =>\n  arr1.map(e1 => arr2.map(e2 => [e1, e2])).reduce((arr, e) => arr.concat(e), []);\n\nlet toTuples = (arr) =>\n  arr.map(a => ({fst:a[0], snd:a[1]}));\n\n\nlet collided = ({x:x1, y:y1}, size1, {x:x2, y:y2}, size2) =>\n    (x2 < (x1 + size1) &&\n     x1 < (x2 + size2) &&\n     y2 < (y1 + size1) &&\n     y1 < (y2 + size2));\n\n\nlet detectCollisions = (svArr1, size1, svArr2, size2) =>\n  toTuples(cartesianProduct2(svArr1, svArr2))\n    .filter(svPair => collided(svPair.fst, size1, svPair.snd, size2))\n    .map(collidedPair => ({id1:collidedPair.fst.id, id2:collidedPair.snd.id}));\n\n\nlet checkSeekingInvaders = (invaders, humans) => {\n  return true;\n}\n\nlet checkHitInvaders = (invaders, projectiles) =>\n  detectCollisions(invaders, Invader.sideLen, projectiles, Projectile.sideLen)\n    .map(collidedPair => { collidedPair.event=Event.dead; return collidedPair; });\n\n\nlet checkProjectiles = (projectiles, t) =>\n  projectiles.filter(p => (t - p.t_spawned) > projectileLifetime)\n    .map(p => ({event:Event.remove, id:p.id}));\n\n\nlet toLocal = sv => {\n  let lx = sv.x - offsetx;\n  lx += Global.viewWidth / 2;\n\n  let ly = sv.y;\n\n  return {id:sv.id, lx:lx, ly:ly, gx_debug:sv.x};\n}\n\nlet clip = lcoords => (lcoords.lx >= 0) && (lcoords.ly < Global.viewWidth);\n\nlet remove = (objects, id, graphics) => {\n  let o = objects.findIndex(o => o.id == id);\n  objects.splice(o, 1);\n  graphics.delete(id);\n}\n\n\n\nlet initArray = (n, f) => Array(n).fill().map(f);\n\n\nlet offsetx = 0;\nlet targetoffsetx = 0;\nlet playerId = 1;\nlet invaderId = 100;\nlet player = new Player(playerId, 0, 48 / 2, PlayerState.faceRight, 0);\nlet invaders = initArray(3, _ => new Invader(invaderId++, Math.floor(Math.random() * modulusx), 48 / 2, InvaderState.seeking, 0));\nlet humanId = 200;\nlet humans = initArray(10, _ => new Human(humanId++, Math.floor(Math.random() * modulusx), 47, 0.2 * (Math.random() - 0.5)));\nlet projectileId = 500;\nlet projectiles = [];\nlet graphics = new Map();\n\nlet t = 0;\n\nlet doGame = (fastTextMode, viewWidth, viewHeight, input, debug = false) => {\n\n  Global.viewWidth = viewWidth;\n  Global.viewHeight = viewHeight;\n\n  updatePlayerState(player, input);\n\n  if(input.fire) {\n    projectiles.push(new Projectile(projectileId++, player.x, player.y+1, (player.state == PlayerState.faceLeft) ? -2 : 2, 0, t));\n    if(projectileId >= 1000) projectileId = 500;\n  }\n\n  let projectileEvents = checkProjectiles(projectiles, t);\n\n\n  projectileEvents.map(pe => {\n    remove(projectiles, pe.id, graphics);\n  });\n\n  let hits = checkHitInvaders(invaders, projectiles);\n  if(hits.length > 0) {\n    let id = hits[0].id1;\n    if(id >= 100 && id < 200) {\n      remove(invaders, id, graphics);\n    }\n  }\n\n  graphics.set(player.id, (player.state == PlayerState.faceLeft) ? Player.graphic[0] : Player.graphic[1]);\n\n  invaders.map(i => graphics.set(i.id, Invader.graphic));\n  humans.map(h => graphics.set(h.id, Human.graphic));\n  projectiles.map(p => graphics.set(p.id, Projectile.graphic));\n\n\n  updatePlayerPosition(player, input);\n  updateInvaders(invaders);\n  updateHumans(humans);\n  updateProjectiles(projectiles);\n\n  let displacementList = [].concat(invaders, humans, projectiles);\n\n  let displacementx = player.xdot;\n  displacementList.map(o => {o.x -= displacementx});\n\n  let displayList = [].concat(player, displacementList);\n\n  displayList\n    .map(toLocal)\n    .filter(clip)\n    .map(i => {\n      fastTextMode.setString(Math.floor(i.lx), Math.floor(i.ly), graphics.has(i.id) ? graphics.get(i.id) : '!')\n      if(debug) {\n        // overlay object id and x coordinate\n        fastTextMode.setNumber(Math.floor(i.lx), Math.floor(i.ly), i.id)\n        fastTextMode.setNumber(Math.floor(i.lx), Math.floor(i.ly+2), Math.floor(i.gx_debug))\n      }\n    });\n\n\n  (player.state == PlayerState.faceLeft) ? targetoffsetx = halfmodulusx - 16 : targetoffsetx = halfmodulusx + 16;\n  offsetx += easing * (targetoffsetx - offsetx);\n\n  // let e = checkSeekingInvaders(invaders.filter(i => i.state == InvaderState.seeking), humans);\n\n  t++;\n}\n\n"]}