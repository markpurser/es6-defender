{"version":3,"sources":["es6-defender.js"],"names":["PlayerState","Object","freeze","faceLeft","faceRight","exploding","InvaderState","seeking","locked","abducting","mutant","explodingReleaseHuman","Event","abducted","mutated","dead","removeProjectile","removeHuman","easing","playerAccel","playerDamping","halfmodulusx","modulusx","projectileLifetime","Global","viewWidth","viewHeight","StateVector","id","x","y","xdot","ydot","Player","state","t_startState","sideLen","graphic","Invader","graphicAbducting","Human","Projectile","t_spawned","wrapx","updatePlayerPosition","sv","input","leftright","updown","updatePlayerState","player","updateInvaderPosition","targetx","targety","a","Math","random","updateInvaders","invaders","invaderTargets","map","i","has","get","humanXDot","updateInvaderState","events","t","e","event","idx","findIndex","invaderId","updateHumanPosition","updateHumans","humans","updateProjectilePosition","updateProjectiles","projectiles","cartesianProduct2","arr1","arr2","e1","e2","reduce","arr","concat","toTuples","fst","snd","xoverlap","x1","size1","x2","size2","yoverlap","y1","y2","collided","detectCollisions","svArr1","svArr2","filter","svPair","id1","collidedPair","id2","checkSeekingInvader","invader","inRangeHumans","h","length","humanId","checkLockedInvader","checkAbductingInvader","checkHitInvaders","checkProjectiles","p","toLocal","lx","offsetx","ly","gx_debug","clip","lcoords","remove","objects","graphics","o","splice","delete","initArray","n","f","Array","fill","targetoffsetx","playerId","floor","projectileId","Map","doGame","fastTextMode","debug","fire","push","projectileEvents","hitEvents","seekingInvaderEvents","lockedInvaderEvents","abductingInvaderEvents","invaderEvents","allEvents","set","g","displacementList","displacement","displayList","setString","setNumber"],"mappings":"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","file":"es6-defender.min.js","sourcesContent":["\nlet PlayerState = Object.freeze({faceLeft:1, faceRight:2, exploding:3})\n\nlet InvaderState = Object.freeze({seeking:1, locked:2, abducting:3, mutant:4, exploding:5, explodingReleaseHuman:6})\n\nlet Event = Object.freeze({locked:1, abducted:2, mutated:3, dead:4, removeProjectile:5, removeHuman:6})\n\nlet easing = 0.05;\nlet playerAccel = 0.15;\nlet playerDamping = 0.1;\nlet halfmodulusx = 256;\nlet modulusx = 512;\nlet projectileLifetime = 50;\n\nlet Global = {viewWidth:0, viewHeight:0};\n\nclass StateVector {\n  \n  constructor(id, x, y, xdot = 0, ydot = 0) {\n    this.id = id;\n    this.x = x;\n    this.y = y;\n    this.xdot = xdot;\n    this.ydot = ydot;\n  }\n}\n\nclass Player extends StateVector {\n\n  constructor(id, x, y, state, t_startState) {\n    super(id, x, y);\n\n    this.state = state;\n    this.t_startState = t_startState;\n  }\n}\n\nPlayer.sideLen = 3;\nPlayer.graphic = ['  /\\n<--', '\\\\  \\n-->']; \n\nclass Invader extends StateVector {\n  \n  constructor(id, x, y, state, t_startState) {\n    super(id, x, y);\n\n    this.state = state;\n    this.t_startState = t_startState;\n  }\n}\n\nInvader.sideLen = 2;\nInvader.graphic = '^^\\n[]\\n';\nInvader.graphicAbducting = '^^\\n[]\\nH';\n\nclass Human extends StateVector {\n\n  constructor(id, x, y, xdot, ydot) {\n    super(id, x, y, xdot, ydot);\n  }\n}\n\nHuman.sideLen = 1;\nHuman.graphic = 'H';\n\nclass Projectile extends StateVector {\n\n  constructor(id, x, y, xdot, ydot, t_spawned) {\n    super(id, x, y, xdot, ydot);\n\n    this.t_spawned = t_spawned;\n  }\n}\n\nProjectile.sideLen = 1;\nProjectile.graphic = '-';\n\nlet wrapx = (x) => (x + modulusx) % modulusx;\n\nlet updatePlayerPosition = (sv, input) => {\n  sv.xdot += playerAccel * input.leftright;\n  sv.ydot += playerAccel * input.updown;\n\n  sv.xdot += playerDamping * -sv.xdot;\n  sv.ydot += playerDamping * -sv.ydot;\n\n  sv.x = halfmodulusx;\n  sv.y += sv.ydot;\n\n  if(sv.y < 0) sv.y = 0;\n  if(sv.y > Global.viewHeight - 5) sv.y = Global.viewHeight - 5;\n\n  return sv;\n}\n\nlet updatePlayerState = (player, input) => {\n  if(input.leftright != 0) {\n    player.state = (input.leftright == -1) ? PlayerState.faceLeft : PlayerState.faceRight;\n  }\n}\n\nlet updateInvaderPosition = (sv, state, targetx, targety) => {\n  let a = {\n      [InvaderState.seeking]: () => {\n        sv.xdot += 0.01 * (Math.random() - 0.5);\n        sv.ydot += 0.01 * (Math.random() - 0.5);\n        sv.x += sv.xdot;\n        sv.y += sv.ydot;\n\n        if(sv.y < 5) { sv.ydot = -sv.ydot; sv.y = 5; }\n        if(sv.y > (Global.viewHeight - 5)) { sv.ydot = -sv.ydot; sv.y = (Global.viewHeight - 5); }\n      },\n      [InvaderState.locked]: () => {\n        sv.xdot = targetx;\n        sv.ydot = 0.1;\n\n        sv.x += sv.xdot;\n        sv.y += sv.ydot;\n      },\n      [InvaderState.abducting]: () => {\n        sv.ydot = -0.1;\n\n        sv.y += sv.ydot;\n      },\n      [InvaderState.mutant]: () => {\n        sv.x += 0.01 * (targetx - sv.x) + 3 * (Math.random() - 0.5);\n        sv.y += 0.01 * (targety - sv.y);\n      },\n      [InvaderState.exploding]: () => {\n      },\n      [InvaderState.explodingReleaseHuman]: () => {\n      }\n    }[state]();\n\n  return sv;\n}\n\nlet updateInvaders = (invaders, invaderTargets, player) =>\n  invaders.map(i => {\n    let targetx = 0, targety = 0;\n    if(i.state == InvaderState.mutant) {\n      targetx = player.x;\n      targety = player.y;\n    }\n    else if(invaderTargets.has(i.id)) {\n      targetx = invaderTargets.get(i.id).humanXDot;\n    }\n    updateInvaderPosition(i, i.state, targetx, targety);\n  });\n\nlet updateInvaderState = (invaders, events, t) => {\n  events.map(e => {\n    if(e.event == Event.locked || e.event == Event.abducted || e.event == Event.dead || e.event == Event.mutated)\n    {\n      let idx = invaders.findIndex(i => i.id == e.invaderId);\n      let i = invaders[idx];\n      i.state = {\n        [Event.locked]: InvaderState.locked,\n        [Event.abducted]: InvaderState.abducting,\n        [Event.mutated]: InvaderState.mutant,\n        [Event.dead]: i.state == InvaderState.abducting ? InvaderState.explodingReleaseHuman : InvaderState.exploding\n      }[e.event];\n      i.t_startState = t;      \n    }\n  })\n}\n\nlet updateHumanPosition = (sv) => {\n  sv.x += sv.xdot;\n  sv.y += sv.ydot;\n\n  return sv;\n}\n\nlet updateHumans = (humans) => humans.map(updateHumanPosition);\n\nlet updateProjectilePosition = (sv) => {\n  sv.x += sv.xdot;\n  sv.y += sv.ydot;\n\n  return sv;\n}\n\nlet updateProjectiles = (projectiles) => projectiles.map(updateProjectilePosition);\n\nlet cartesianProduct2 = (arr1, arr2) =>\n  arr1.map(e1 => arr2.map(e2 => [e1, e2])).reduce((arr, e) => arr.concat(e), []);\n\nlet toTuples = (arr) =>\n  arr.map(a => ({fst:a[0], snd:a[1]}));\n\n\nlet xoverlap = (x1, size1, x2, size2) =>\n  (x2 < (x1 + size1) &&\n   x1 < (x2 + size2));\n\nlet yoverlap = (y1, size1, y2, size2) =>\n  (y2 < (y1 + size1) &&\n   y1 < (y2 + size2));\n\nlet collided = ({x:x1, y:y1}, size1, {x:x2, y:y2}, size2) =>\n  (xoverlap(x1, size1, x2, size2) && yoverlap(y1, size1, y2, size2));\n\n\nlet detectCollisions = (svArr1, size1, svArr2, size2) =>\n  toTuples(cartesianProduct2(svArr1, svArr2))\n    .filter(svPair => collided(svPair.fst, size1, svPair.snd, size2))\n    .map(collidedPair => ({id1:collidedPair.fst.id, id2:collidedPair.snd.id}));\n\n\nlet checkSeekingInvader = (invader, humans) => {\n  let inRangeHumans = humans.filter(h => xoverlap(invader.x, Invader.sideLen, h.x, Human.sideLen));\n  if(inRangeHumans.length > 0) {\n    if(Math.random() < 0.1) {\n      return [{event:Event.locked, invaderId:invader.id, humanId:inRangeHumans[0].id, humanXDot:inRangeHumans[0].xdot}];\n    }\n  }\n  return [];\n}\n\nlet checkLockedInvader = (invader, e) => {\n  return ((invader.y + Invader.sideLen) >= Global.viewHeight) ?\n    [{event:Event.abducted, invaderId:invader.id, humanId:e.humanId},\n     {event:Event.removeHuman, id:e.humanId}] :\n    [];\n}\n\nlet checkAbductingInvader = (invader) => {\n  return (invader.y <= 0) ?\n    [{event:Event.mutated, invaderId:invader.id}] :\n    [];\n}\n\nlet checkHitInvaders = (invaders, projectiles) =>\n  detectCollisions(invaders, Invader.sideLen, projectiles, Projectile.sideLen)\n    .map(collidedPair => ({event:Event.dead, invaderId:collidedPair.id1}));\n\n\nlet checkProjectiles = (projectiles, t) =>\n  projectiles.filter(p => (t - p.t_spawned) > projectileLifetime)\n    .map(p => ({event:Event.removeProjectile, id:p.id}));\n\n\nlet toLocal = sv => {\n  let lx = sv.x - offsetx;\n  lx += Global.viewWidth / 2;\n\n  let ly = sv.y;\n\n  return {id:sv.id, lx:lx, ly:ly, gx_debug:sv.x};\n}\n\nlet clip = lcoords => (lcoords.lx >= 0) && (lcoords.ly < Global.viewWidth);\n\nlet remove = (objects, id, graphics) => {\n  let o = objects.findIndex(o => o.id == id);\n  objects.splice(o, 1);\n  graphics.delete(id);\n}\n\n\n\nlet initArray = (n, f) => Array(n).fill().map(f);\n\n\nlet offsetx = 0;\nlet targetoffsetx = 0;\nlet playerId = 1;\nlet invaderId = 100;\nlet player = new Player(playerId, 0, 48 / 2, PlayerState.faceRight, 0);\nlet invaders = initArray(3, _ => new Invader(invaderId++, Math.floor(Math.random() * modulusx), 48 / 2, InvaderState.seeking, 0));\nlet humanId = 200;\nlet humans = initArray(10, _ => new Human(humanId++, Math.floor(Math.random() * modulusx), 47, 0.2 * (Math.random() - 0.5)));\nlet projectileId = 500;\nlet projectiles = [];\nlet graphics = new Map();\nlet invaderTargets = new Map();\n\nlet t = 0;\n\nlet doGame = (fastTextMode, viewWidth, viewHeight, input, debug = false) => {\n\n  Global.viewWidth = viewWidth;\n  Global.viewHeight = viewHeight;\n\n  if(input.fire) {\n    projectiles.push(new Projectile(projectileId++, player.x, player.y+1, (player.state == PlayerState.faceLeft) ? -2 : 2, 0, t));\n    if(projectileId >= 1000) projectileId = 500;\n  }\n\n  let projectileEvents = checkProjectiles(projectiles, t);\n\n  let hitEvents = checkHitInvaders(invaders, projectiles);\n\n  let seekingInvaderEvents = invaders.filter(i => i.state == InvaderState.seeking).reduce((arr, i) => arr.concat(checkSeekingInvader(i, humans)), []);\n  let lockedInvaderEvents = invaders.filter(i => i.state == InvaderState.locked).reduce((arr, i) => arr.concat(checkLockedInvader(i, invaderTargets.get(i.id))), []);\n  let abductingInvaderEvents = invaders.filter(i => i.state == InvaderState.abducting).reduce((arr, i) => arr.concat(checkAbductingInvader(i)), []);\n\n  let invaderEvents = [].concat(hitEvents, seekingInvaderEvents, lockedInvaderEvents, abductingInvaderEvents);\n\n  let allEvents = [].concat(projectileEvents, hitEvents, invaderEvents);\n  allEvents.filter(e => e.event == Event.removeProjectile).map(e => remove(projectiles, e.id, graphics));\n  allEvents.filter(e => e.event == Event.locked).map(e => invaderTargets.set(e.invaderId, e));\n  allEvents.filter(e => e.event == Event.removeHuman).map(e => remove(humans, e.id, graphics));\n\n\n  graphics.set(player.id, (player.state == PlayerState.faceLeft) ? Player.graphic[0] : Player.graphic[1]);\n\n  invaders.map(i => {\n    let g = (i.state == InvaderState.abducting) ? Invader.graphicAbducting : Invader.graphic;\n    graphics.set(i.id, g);\n  });\n  humans.map(h => graphics.set(h.id, Human.graphic));\n  projectiles.map(p => graphics.set(p.id, Projectile.graphic));\n\n\n  // non-functional code section. game objects are updated 'in-place'\n  updatePlayerState(player, input);\n  updateInvaderState(invaders, invaderEvents, t);\n\n  updatePlayerPosition(player, input);\n  updateInvaders(invaders, invaderTargets, player);\n  updateHumans(humans);\n  updateProjectiles(projectiles);\n  // end non-functional code section\n\n  // events based on state changes must be placed after update code\n\n  // abducting invaders drop human when hit\n  invaders.filter(i => i.state == InvaderState.explodingReleaseHuman && i.t_startState == t)\n    .map(i => humans.push(new Human(humanId++, i.x+2, i.y, 0, 0.1)));\n\n  invaders.filter(i => i.state == InvaderState.explodingReleaseHuman || i.state == InvaderState.exploding && i.t_startState == t)\n    .map(i => remove(invaders, i.id, graphics));\n\n\n  let displacementList = [].concat(invaders, humans, projectiles);\n\n  let displacement = player.xdot;\n  displacementList.map(o => {o.x = wrapx(o.x - displacement)});\n\n  let displayList = displacementList.concat(player);\n\n  displayList\n    .map(toLocal)\n    .filter(clip)\n    .map(i => {\n      fastTextMode.setString(Math.floor(i.lx), Math.floor(i.ly), graphics.has(i.id) ? graphics.get(i.id) : '!')\n      if(debug) {\n        // overlay object id and x coordinate\n        fastTextMode.setNumber(Math.floor(i.lx+3), Math.floor(i.ly), i.id)\n        fastTextMode.setNumber(Math.floor(i.lx), Math.floor(i.ly+4), Math.floor(i.gx_debug))\n      }\n    });\n\n\n  (player.state == PlayerState.faceLeft) ? targetoffsetx = halfmodulusx - 16 : targetoffsetx = halfmodulusx + 16;\n  offsetx += easing * (targetoffsetx - offsetx);\n\n  // let e = checkSeekingInvaders(invaders.filter(i => i.state == InvaderState.seeking), humans);\n\n  t++;\n}\n\n"]}