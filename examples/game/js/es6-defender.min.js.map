{"version":3,"sources":["es6-defender.js"],"names":["PlayerState","Object","freeze","faceLeft","faceRight","exploding","InvaderState","seeking","locked","abducting","mutant","explodingReleaseHuman","Event","abducted","mutated","dead","removeProjectile","removeHuman","playerDead","collectedHuman","removeDebris","easing","playerAccelX","playerDampingX","playerMaxSpeedX","playerMaxSpeedY","debrisDamping","modulusx","halfmodulusx","starmodulusx","halfstarmodulusx","projectileLifetime","debrisLifetime","Global","viewWidth","viewHeight","StateVector","id","x","y","xdot","ydot","Player","state","t_startState","sideLen","graphic","colour","Invader","graphicAbducting","colourAbducting","Human","Projectile","t_spawned","graphic2","colour2","Debris","Star","depth","wrapx","wrapstarx","updatePlayerPosition","sv","input","leftright","updown","updatePlayerState","player","updateInvaderPosition","targetx","targety","a","Math","random","updateInvaders","invaders","invaderTargets","map","i","has","get","humanXDot","updateInvaderState","events","t","e","event","idx","findIndex","invaderId","updateHumanPosition","updateHumans","humans","updateProjectilePosition","updateProjectiles","projectiles","updateDebrisPosition","d","updateDebris","debris","cartesianProduct2","arr1","arr2","e1","e2","reduce","arr","concat","toTuples","fst","snd","xoverlap","x1","size1","x2","size2","yoverlap","y1","y2","collided","detectCollisions","svArr1","svArr2","filter","svPair","id1","collidedPair","id2","checkSeekingInvader","invader","inRangeHumans","h","length","humanId","checkLockedInvader","checkAbductingInvader","checkHitInvaders","checkHitPlayerProjectiles","checkHitPlayerInvaders","checkHitPlayerHumans","checkProjectiles","p","checkDebris","toLocal","lx","offsetx","ly","gx_debug","clip","lcoords","remove","objects","graphics","o","splice","delete","fillWith","n","f","Array","fill","targetoffsetx","playerId","floor","projectileId","invaderProjectileId","invaderProjectiles","starfield","debrisId","Map","score","colours","doGame","fastTextMode","debug","fire","push","seekingInvaders","lockedInvaders","abductingInvaders","mutantInvaders","dx","abs","dy","l","sqrt","unitdx","unitdy","projectileEvents","debrisEvents","hitEvents","playerProjectileHitEvent","playerInvaderHitEvent","playerHumanHitEvent","seekingInvaderEvents","lockedInvaderEvents","abductingInvaderEvents","invaderEvents","allEvents","set","eiofjeiof","g","s","displacementList","displacement","displayList","c","setString","setNumber"],"mappings":"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","file":"es6-defender.min.js","sourcesContent":["\nlet PlayerState = Object.freeze({faceLeft:1, faceRight:2, exploding:3})\n\nlet InvaderState = Object.freeze({seeking:1, locked:2, abducting:3, mutant:4, exploding:5, explodingReleaseHuman:6})\n\nlet Event = Object.freeze({locked:1, abducted:2, mutated:3, dead:4, removeProjectile:5, removeHuman:6, playerDead:7, collectedHuman:8, removeDebris:9})\n\nlet easing = 0.05;\nlet playerAccelX = 0.2;\nlet playerDampingX = 0.1;\nlet playerMaxSpeedX = 1.9;\nlet playerMaxSpeedY = 0.7;\nlet debrisDamping = 0.01;\nlet modulusx = 512;\nlet halfmodulusx = modulusx / 2;\nlet starmodulusx = 256;\nlet halfstarmodulusx = starmodulusx / 2;\nlet projectileLifetime = 30;\nlet debrisLifetime = 100;\n\nlet Global = {viewWidth:0, viewHeight:0};\n\nclass StateVector {\n  \n  constructor(id, x, y, xdot = 0, ydot = 0) {\n    this.id = id;\n    this.x = x;\n    this.y = y;\n    this.xdot = xdot;\n    this.ydot = ydot;\n  }\n}\n\nclass Player extends StateVector {\n\n  constructor(id, x, y, state, t_startState) {\n    super(id, x, y);\n\n    this.state = state;\n    this.t_startState = t_startState;\n  }\n}\n\nPlayer.sideLen = 3;\nPlayer.graphic = ['  /\\n<--', '\\\\  \\n-->'];\nPlayer.colour = 0x00ccff;\n\nclass Invader extends StateVector {\n  \n  constructor(id, x, y, state, t_startState) {\n    super(id, x, y);\n\n    this.state = state;\n    this.t_startState = t_startState;\n  }\n}\n\nInvader.sideLen = 4;\nInvader.graphic = '^^^^\\n[[]]\\n[[]]\\n[[]]';\nInvader.graphicAbducting = '^^^^\\n[[]]\\n[[]]\\n[[]]\\n HH \\n HH';\nInvader.colour = 0x00ff00;\nInvader.colourAbducting = 0x00ff00;\n\nclass Human extends StateVector {\n\n  constructor(id, x, y, xdot, ydot) {\n    super(id, x, y, xdot, ydot);\n  }\n}\n\nHuman.sideLen = 2;\nHuman.graphic = 'HH\\nHH';\nHuman.colour = 0x00aa99;\n\nclass Projectile extends StateVector {\n\n  constructor(id, x, y, xdot, ydot, t_spawned) {\n    super(id, x, y, xdot, ydot);\n\n    this.t_spawned = t_spawned;\n  }\n}\n\nProjectile.sideLen = 2;\nProjectile.graphic = '--';\nProjectile.graphic2 = '**\\n**';\nProjectile.colour = 0xffff00;\nProjectile.colour2 = 0xffcc00;\n\nclass Debris extends StateVector {\n\n  constructor(id, x, y, xdot, ydot, t_spawned) {\n    super(id, x, y, xdot, ydot);\n\n    this.t_spawned = t_spawned;\n  }\n}\n\nDebris.graphic = '@';\nDebris.colour = 0xff88ff;\n\n\nclass Star extends StateVector {\n\n  constructor(id, x, y, depth) {\n    super(id, x, y);\n\n    this.depth = depth;\n  }\n}\n\nStar.graphic = '.';\nStar.colour = 0xcccccc;\n\n\nlet wrapx = (x) => {\n  if(x < -halfmodulusx) x += modulusx;\n  else if(x >= halfmodulusx) x -= modulusx;\n  return x;\n}\n\nlet wrapstarx = (x) => {\n  if(x < -halfstarmodulusx) x += starmodulusx;\n  else if(x >= halfstarmodulusx) x -= starmodulusx;\n  return x;\n}\n\nlet updatePlayerPosition = (sv, input) => {\n  sv.xdot += playerAccelX * input.leftright;\n  sv.ydot = playerMaxSpeedY * input.updown;\n\n  if(sv.xdot < -playerMaxSpeedX) sv.xdot = -playerMaxSpeedX;\n  if(sv.xdot > playerMaxSpeedX) sv.xdot = playerMaxSpeedX;\n\n  if(!input.leftright) sv.xdot += -playerDampingX * sv.xdot;\n\n  sv.x = 0;\n  sv.y += sv.ydot;\n\n  if(sv.y < 0) sv.y = 0;\n  if(sv.y > Global.viewHeight - 5) sv.y = Global.viewHeight - 5;\n\n  return sv;\n}\n\nlet updatePlayerState = (player, input) => {\n  if(input.leftright != 0) {\n    player.state = (input.leftright == -1) ? PlayerState.faceLeft : PlayerState.faceRight;\n  }\n}\n\nlet updateInvaderPosition = (sv, state, targetx, targety) => {\n  let a = {\n      [InvaderState.seeking]: () => {\n        sv.xdot += 0.02 * (Math.random() - 0.5);\n        sv.ydot += 0.02 * (Math.random() - 0.5);\n        sv.x += sv.xdot;\n        sv.y += sv.ydot;\n\n        if(sv.y < 5) { sv.ydot = -sv.ydot; sv.y = 5; }\n        if(sv.y > (Global.viewHeight - 5)) { sv.ydot = -sv.ydot; sv.y = (Global.viewHeight - 5); }\n      },\n      [InvaderState.locked]: () => {\n        sv.xdot = targetx;\n        sv.ydot = 0.2;\n\n        sv.x += sv.xdot;\n        sv.y += sv.ydot;\n      },\n      [InvaderState.abducting]: () => {\n        sv.ydot = -0.2;\n\n        sv.y += sv.ydot;\n      },\n      [InvaderState.mutant]: () => {\n        sv.x += 0.02 * (targetx - sv.x) + 3 * (Math.random() - 0.5);\n        sv.y += 0.02 * (targety - sv.y);\n      },\n      [InvaderState.exploding]: () => {\n      },\n      [InvaderState.explodingReleaseHuman]: () => {\n      }\n    }[state]();\n\n  return sv;\n}\n\nlet updateInvaders = (invaders, invaderTargets, player) =>\n  invaders.map(i => {\n    let targetx = 0, targety = 0;\n    if(i.state == InvaderState.mutant) {\n      targetx = player.x;\n      targety = player.y;\n    }\n    else if(invaderTargets.has(i.id)) {\n      targetx = invaderTargets.get(i.id).humanXDot;\n    }\n    updateInvaderPosition(i, i.state, targetx, targety);\n  });\n\nlet updateInvaderState = (invaders, events, t) => {\n  events.map(e => {\n    if(e.event == Event.locked || e.event == Event.abducted || e.event == Event.dead || e.event == Event.mutated)\n    {\n      let idx = invaders.findIndex(i => i.id == e.invaderId);\n      let i = invaders[idx];\n      i.state = {\n        [Event.locked]: InvaderState.locked,\n        [Event.abducted]: InvaderState.abducting,\n        [Event.mutated]: InvaderState.mutant,\n        [Event.dead]: i.state == InvaderState.abducting ? InvaderState.explodingReleaseHuman : InvaderState.exploding\n      }[e.event];\n      i.t_startState = t;      \n    }\n  })\n}\n\nlet updateHumanPosition = (sv) => {\n  sv.x += sv.xdot;\n  sv.y += sv.ydot;\n\n  return sv;\n}\n\nlet updateHumans = (humans) => humans.map(updateHumanPosition);\n\nlet updateProjectilePosition = (sv) => {\n  sv.x += sv.xdot;\n  sv.y += sv.ydot;\n\n  return sv;\n}\n\nlet updateProjectiles = (projectiles) => projectiles.map(updateProjectilePosition);\n\nlet updateDebrisPosition = (d) => {\n  updateProjectilePosition(d);\n\n  d.xdot += -debrisDamping * d.xdot;\n  d.ydot += -debrisDamping * d.ydot;\n\n  return d;\n}\n\nlet updateDebris = (debris) => debris.map(updateDebrisPosition);\n\nlet cartesianProduct2 = (arr1, arr2) =>\n  arr1.map(e1 => arr2.map(e2 => [e1, e2])).reduce((arr, e) => arr.concat(e), []);\n\nlet toTuples = (arr) =>\n  arr.map(a => ({fst:a[0], snd:a[1]}));\n\n\nlet xoverlap = (x1, size1, x2, size2) =>\n  (x2 < (x1 + size1) &&\n   x1 < (x2 + size2));\n\nlet yoverlap = (y1, size1, y2, size2) =>\n  (y2 < (y1 + size1) &&\n   y1 < (y2 + size2));\n\nlet collided = ({x:x1, y:y1}, size1, {x:x2, y:y2}, size2) =>\n  (xoverlap(x1, size1, x2, size2) && yoverlap(y1, size1, y2, size2));\n\n\nlet detectCollisions = (svArr1, size1, svArr2, size2) =>\n  toTuples(cartesianProduct2(svArr1, svArr2))\n    .filter(svPair => collided(svPair.fst, size1, svPair.snd, size2))\n    .map(collidedPair => ({id1:collidedPair.fst.id, id2:collidedPair.snd.id}));\n\nlet checkSeekingInvader = (invader, humans) => {\n  let inRangeHumans = humans.filter(h => xoverlap(invader.x, Invader.sideLen, h.x, Human.sideLen));\n  if(inRangeHumans.length > 0) {\n    if(Math.random() < 0.1) {\n      return [{event:Event.locked, invaderId:invader.id, humanId:inRangeHumans[0].id, humanXDot:inRangeHumans[0].xdot}];\n    }\n  }\n  return [];\n}\n\nlet checkLockedInvader = (invader, e) => {\n  return ((invader.y + Invader.sideLen) >= Global.viewHeight) ?\n    [{event:Event.abducted, invaderId:invader.id, humanId:e.humanId},\n     {event:Event.removeHuman, id:e.humanId}] :\n    [];\n}\n\nlet checkAbductingInvader = (invader) => {\n  return (invader.y <= 0) ?\n    [{event:Event.mutated, invaderId:invader.id}] :\n    [];\n}\n\nlet checkHitInvaders = (invaders, projectiles) =>\n  detectCollisions(invaders, Invader.sideLen, projectiles, Projectile.sideLen)\n    .reduce((arr, collidedPair) => arr.concat([\n      {event:Event.dead, invaderId:collidedPair.id1},\n      {event:Event.removeProjectile, id:collidedPair.id2}\n    ]), []);\n\nlet checkHitPlayerProjectiles = (player, projectiles) =>\n  detectCollisions([player], Player.sideLen, projectiles, Projectile.sideLen)\n    .map(collidedPair => ({event:Event.playerDead}));\n\nlet checkHitPlayerInvaders = (player, invaders) =>\n  detectCollisions([player], Player.sideLen, invaders, Invader.sideLen)\n    .map(collidedPair => ({event:Event.playerDead}));\n\nlet checkHitPlayerHumans = (player, humans) =>\n  detectCollisions([player], Player.sideLen, humans, Human.sideLen)\n    .reduce((arr, collidedPair) => arr.concat([\n      {event:Event.collectedHuman},\n      {event:Event.removeHuman, id:collidedPair.id2}\n    ]), []);\n\n\nlet checkProjectiles = (projectiles, t) =>\n  projectiles.filter(p => (t - p.t_spawned) > projectileLifetime)\n    .map(p => ({event:Event.removeProjectile, id:p.id}));\n\nlet checkDebris = (debris, t) =>\n  debris.filter(d => (t - d.t_spawned) > debrisLifetime)\n    .map(d => ({event:Event.removeDebris, id:d.id}));\n\n\nlet toLocal = sv => {\n  let lx = sv.x - offsetx;\n  lx += Global.viewWidth / 2;\n\n  let ly = sv.y;\n\n  return {id:sv.id, lx:lx, ly:ly, gx_debug:sv.x};\n}\n\nlet clip = lcoords => (lcoords.lx >= 0) && (lcoords.ly < Global.viewWidth);\n\nlet remove = (objects, id, graphics) => {\n  let o = objects.findIndex(o => o.id == id);\n  objects.splice(o, 1);\n  graphics.delete(id);\n}\n\n\n\nlet fillWith = (n, f) => Array(n).fill().map(f);\n\n\nlet offsetx = 0;\nlet targetoffsetx = 0;\nlet playerId = 1;\nlet invaderId = 100;\nlet player = new Player(playerId, 0, 96 / 2, PlayerState.faceRight, 0);\nlet invaders = fillWith(10, _ => new Invader(invaderId++, (((Math.random() * 0.8) + 0.2) * halfmodulusx) * [1,-1][Math.floor(Math.random()*2)], 96 / 2, InvaderState.seeking, 0));\nlet humanId = 200;\nlet humans = fillWith(10, _ => new Human(humanId++, (Math.random() - 0.5) * modulusx, 94, 0.2 * (Math.random() - 0.5)));\nlet projectileId = 500;\nlet projectiles = [];\nlet invaderProjectileId = 1000;\nlet invaderProjectiles = [];\nlet starfield = fillWith(50, _ => new Star(2000, (Math.random() - 0.5) * starmodulusx, Math.random() * 96, (Math.random() * 0.5) + 0.5));\nlet debrisId = 3000;\nlet debris = [];\nlet graphics = new Map();\nlet invaderTargets = new Map();\nlet score = 0;\nlet colours = new Map([\n  [Player.graphic[0], Player.colour],\n  [Player.graphic[1], Player.colour],\n  [Invader.graphic, Invader.colour],\n  [Invader.graphicAbducting, Invader.colourAbducting],\n  [Human.graphic, Human.colour],\n  [Projectile.graphic, Projectile.colour],\n  [Projectile.graphic2, Projectile.colour2],\n  [Debris.graphic, Debris.colour],\n  [Star.graphic, Star.colour]\n]);\n\nlet doGame = (fastTextMode, viewWidth, viewHeight, input, t, debug = false) => {\n\n  Global.viewWidth = viewWidth;\n  Global.viewHeight = viewHeight;\n\n  if(input.fire) {\n    projectiles.push(new Projectile(projectileId++, player.x, player.y+1, (player.state == PlayerState.faceLeft) ? -4 : 4, 0, t));\n    if(projectileId >= 1000) projectileId = 500;\n  }\n\n  let seekingInvaders = invaders.filter(i => i.state == InvaderState.seeking);\n  let lockedInvaders = invaders.filter(i => i.state == InvaderState.locked);\n  let abductingInvaders = invaders.filter(i => i.state == InvaderState.abducting);\n  let mutantInvaders = invaders.filter(i => i.state == InvaderState.mutant);\n\n  seekingInvaders.map(i => {\n    let dx = player.x - i.x;\n    if(Math.random() < 0.01 && Math.abs(dx) < (Global.viewWidth / 3)) {\n      let dy = player.y - i.y;\n      let l = Math.sqrt(dx * dx + dy * dy);\n      let unitdx = dx / l;\n      let unitdy = dy / l;\n      invaderProjectiles.push(new Projectile(invaderProjectileId++, i.x, i.y, unitdx, unitdy, t));\n    }\n  });\n\n  mutantInvaders.map(i => {\n    if(Math.random() < 0.1) {\n      invaderProjectiles.push(new Projectile(invaderProjectileId++, i.x, i.y, Math.random() - 0.5, Math.random() - 0.5, t));\n    }\n  });\n\n  if(invaderProjectileId >= 1500) invaderProjectileId = 1000;\n  if(invaderProjectiles.length > 30) remove(invaderProjectiles, invaderProjectiles[0].id, graphics);\n\n\n  let projectileEvents = checkProjectiles(projectiles, t);\n  let debrisEvents = checkDebris(debris, t);\n\n  let hitEvents = checkHitInvaders(invaders, projectiles);\n\n  let playerProjectileHitEvent = checkHitPlayerProjectiles(player, invaderProjectiles);\n  let playerInvaderHitEvent = checkHitPlayerProjectiles(player, invaders);\n  let playerHumanHitEvent = checkHitPlayerHumans(player, humans);\n\n  let seekingInvaderEvents = seekingInvaders.reduce((arr, i) => arr.concat(checkSeekingInvader(i, humans)), []);\n  let lockedInvaderEvents = lockedInvaders.reduce((arr, i) => arr.concat(checkLockedInvader(i, invaderTargets.get(i.id))), []);\n  let abductingInvaderEvents = abductingInvaders.reduce((arr, i) => arr.concat(checkAbductingInvader(i)), []);\n\n  let invaderEvents = [].concat(hitEvents, seekingInvaderEvents, lockedInvaderEvents, abductingInvaderEvents);\n\n  let allEvents = [].concat(projectileEvents, playerProjectileHitEvent, playerInvaderHitEvent, playerHumanHitEvent, invaderEvents, debrisEvents);\n  allEvents.filter(e => e.event == Event.removeProjectile).map(e => remove(projectiles, e.id, graphics));\n  allEvents.filter(e => e.event == Event.removeDebris).map(e => remove(debris, e.id, graphics));\n  allEvents.filter(e => e.event == Event.locked).map(e => invaderTargets.set(e.invaderId, e));\n  allEvents.filter(e => e.event == Event.removeHuman).map(e => remove(humans, e.id, graphics));\n  allEvents.filter(e => e.event == Event.playerDead).map(e => eiofjeiof());\n  allEvents.filter(e => e.event == Event.collectedHuman).map(_ => {score += 20000;});\n\n\n  graphics.set(player.id, (player.state == PlayerState.faceLeft) ? Player.graphic[0] : Player.graphic[1]);\n\n  invaders.map(i => {\n    let g = (i.state == InvaderState.abducting) ? Invader.graphicAbducting : Invader.graphic;\n    graphics.set(i.id, g);\n  });\n  humans.map(h => graphics.set(h.id, Human.graphic));\n  projectiles.map(p => graphics.set(p.id, Projectile.graphic));\n  invaderProjectiles.map(p => graphics.set(p.id, Projectile.graphic2));\n  starfield.map(s => graphics.set(s.id, Star.graphic));\n  debris.map(d => graphics.set(d.id, Debris.graphic));\n\n\n  // non-functional code section. game objects are updated 'in-place'\n  updatePlayerState(player, input);\n  updateInvaderState(invaders, invaderEvents, t);\n\n  updatePlayerPosition(player, input);\n  updateInvaders(invaders, invaderTargets, player);\n  updateHumans(humans);\n  updateProjectiles(projectiles);\n  updateProjectiles(invaderProjectiles);\n  updateDebris(debris);\n  // end non-functional code section\n\n  // triggers based on state changes must be placed after state update code\n\n  // abducting invaders drop human when hit\n  invaders.filter(i => i.state == InvaderState.explodingReleaseHuman && i.t_startState == t)\n    .map(i => humans.push(new Human(humanId++, i.x+2, i.y, 0, 0.1)));\n\n  // invader explosion\n  invaders.filter(i => i.state == InvaderState.explodingReleaseHuman || i.state == InvaderState.exploding && i.t_startState == t)\n    .map(i => {\n      score += 1000;\n      remove(invaders, i.id, graphics);\n      debris.push(new Debris(debrisId++, i.x, i.y,  0.7, 0.7, t));\n      debris.push(new Debris(debrisId++, i.x, i.y,  1,  0, t));\n      debris.push(new Debris(debrisId++, i.x, i.y,  0.7, -0.7, t));\n      debris.push(new Debris(debrisId++, i.x, i.y,  0, -1, t));\n      debris.push(new Debris(debrisId++, i.x, i.y, -0.7, -0.7, t));\n      debris.push(new Debris(debrisId++, i.x, i.y, -1, 0, t));\n      debris.push(new Debris(debrisId++, i.x, i.y, -0.7,  0.7, t));\n      debris.push(new Debris(debrisId++, i.x, i.y, 0,  1, t));\n      if(debrisId >= 4000) debrisId = 3000;\n    });\n\n\n  let displacementList = [].concat(invaders, humans, projectiles, invaderProjectiles, debris);\n\n  let displacement = player.xdot;\n  displacementList.map(o => {o.x = wrapx(o.x - displacement)});\n\n  starfield.map(o => {o.x = wrapstarx(o.x - (displacement * o.depth))});\n\n  let displayList = [].concat(starfield, displacementList, player);\n\n  displayList\n    .map(toLocal)\n    .filter(clip)\n    .map(i => {\n      let g = graphics.has(i.id) ? graphics.get(i.id) : '!';\n      let c = colours.has(g) ? colours.get(g) : 0xffffff;\n      fastTextMode.setString(Math.floor(i.lx), Math.floor(i.ly), g, c)\n      if(debug) {\n        // overlay object id and x coordinate\n        fastTextMode.setNumber(Math.floor(i.lx+3), Math.floor(i.ly), i.id)\n        fastTextMode.setNumber(Math.floor(i.lx), Math.floor(i.ly+4), Math.floor(i.gx_debug))\n      }\n    });\n\n  fastTextMode.setString(30, 2, 'Score: ');\n  fastTextMode.setNumber(37, 2, score);\n\n  (player.state == PlayerState.faceLeft) ? targetoffsetx = - 32 : targetoffsetx = 32;\n  offsetx += easing * (targetoffsetx - offsetx);\n}\n\n"]}