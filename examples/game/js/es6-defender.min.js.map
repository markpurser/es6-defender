{"version":3,"sources":["es6-defender.js"],"names":["PlayerState","Object","freeze","faceLeft","faceRight","exploding","InvaderState","seeking","locked","abducting","mutant","Event","abducted","mutated","dead","remove","easing","modulus","StateVector","id","x","y","xdot","ydot","Player","state","t_startState","sideLen","graphic","Invader","Human","Projectile","updatePlayerPosition","sv","input","leftright","updown","updateInvaderPosition","targetx","targety","cartesianProduct2","arr1","arr2","map","fst","e1","snd","e2","reduce","arr","e","concat","haveCollided","size1","size2","x1","y1","x2","y2","detectCollisions","svArr1","svArr2","filter","svPair","checkSeekingInvaders","invaders","humans","checkHitInvaders","projectiles","collidedPair","initArray","n","f","Array","fill","offsetx","playerId","invaderId","player","Math","floor","random","displayStrings","Map","doGame","fastTextMode","viewWidth","viewHeight","toLocal","lx","ly","clip","lcoords","index","set","i","displayArray","setString","has","get","lpx"],"mappings":"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","file":"es6-defender.min.js","sourcesContent":["\nlet PlayerState = Object.freeze({faceLeft:1, faceRight:2, exploding:3})\n\nlet InvaderState = Object.freeze({seeking:1, locked:2, abducting:3, mutant:4, exploding:5})\n\nlet Event = Object.freeze({locked:1, abducted:2, mutated:3, dead:4, remove:5})\n\nlet easing = 0.3;\nlet modulus = 512;\n\nclass StateVector {\n  \n  constructor(id, x, y, xdot, ydot) {\n    this.id = id;\n    this.x = x;\n    this.y = y;\n    this.xdot = xdot;\n    this.ydot = ydot;\n  }\n}\n\nclass Player extends StateVector {\n\n  constructor(id, x, y, state, t_startState) {\n    super(id, x, y, 0, 0);\n\n    this.state = state;\n    this.t_startState = t_startState;\n  }\n}\n\nPlayer.sideLen = 3;\nPlayer.graphic = ['  /\\n<--', '\\\\  \\n-->']; \n\nclass Invader extends StateVector {\n  \n  constructor(id, x, y, state, t_startState) {\n    super(id, x, y, 0, 0);\n\n    this.state = state;\n    this.t_startState = t_startState;\n  }\n}\n\nInvader.sideLen = 2;\nInvader.graphic = '^^\\n[]\\n';\n\nclass Human extends StateVector {\n\n  constructor(id, x, y) {\n    super(id, x, y, 0, 0);\n  }\n}\n\nclass Projectile extends StateVector {}\n\nProjectile.sideLen = 1;\nProjectile.graphic = ['*'];\n\n\nlet updatePlayerPosition = (sv, input) => {\n  sv.x += input.leftright;\n  sv.y += input.updown;\n\n  sv.x %= modulus;\n\n  return sv;\n}\n\nlet updateInvaderPosition = (sv, state, targetx, targety) => {\n  switch(state) {\n    case InvaderState.seeking:\n      sv.x++;\n      break;\n  }\n\n  sv.x %= modulus;\n\n  return sv;\n}\n\nlet cartesianProduct2 = (arr1, arr2) =>\n  arr1.map(e1 => arr2.map(e2 => ({fst:e1, snd:e2}))).reduce((arr, e) => arr.concat(e), []);\n\n\nlet haveCollided = ({x:x1, y:y1}, size1, {x:x2, y:y2}, size2) =>\n    (x2 < (x1 + size1) &&\n     x1 < (x2 + size2) &&\n     y2 < (y1 + size1) &&\n     y1 < (y2 + size2));\n\n\nlet detectCollisions = (svArr1, size1, svArr2, size2) =>\n  cartesianProduct2(svArr1, svArr2)\n    .filter(svPair => haveCollided(svPair.fst, size1, svPair.snd, size2));\n\n\nlet checkSeekingInvaders = (invaders, humans) => {\n\n}\n\nlet checkHitInvaders = (invaders, projectiles) =>\n  detectCollisions(invaders, Invader.sideLen, projectiles, Projectile.sideLen)\n    .map(collidedPair => {Event.dead, collidedPair.fst.id, collidedPair.snd.id});\n\n\n\nlet initArray = (n, f) => Array(n).fill().map(f);\n\n\nlet offsetx = 0;\nlet playerId = 1;\nlet invaderId = 100;\nlet player = new Player(playerId, 0, 64 / 2, PlayerState.faceRight, 0);\nlet invaders = initArray(2, _ => new Invader(invaderId++, Math.floor(Math.random() * modulus), 64 / 2, InvaderState.seeking, 0));\n// humanId = 200;\n// let humans = initArray(10, _ => new Human(id++, 4, 1));\nlet displayStrings = new Map();\n\nlet doGame = (fastTextMode, viewWidth, viewHeight, input) => {\n\n  let toLocal = sv => {\n    let lx = sv.x - offsetx;\n    lx += viewWidth / 2;\n\n    if((lx < 0) || (lx >= viewWidth))\n    {\n      lx -= modulus;\n    }\n\n    let ly = sv.y;\n\n    return {id:sv.id, lx:lx, ly:ly};\n  }\n\n  let clip = lcoords => (lcoords.lx >= 0) && (lcoords.ly < viewWidth);\n\n\n  if(input.leftright != 0) {\n    let index = 1;\n    if(input.leftright == -1) index = 0;\n    displayStrings.set(player.id, Player.graphic[index]);\n  }\n\n  invaders.map(i => displayStrings.set(i.id, Invader.graphic));\n\n  let displayArray = [].concat(\n    updatePlayerPosition(player, input),\n    invaders.map(i => updateInvaderPosition(i, i.state, 0, 0))\n  );\n\n  displayArray.map(toLocal)\n    .filter(clip)\n    .map(i => fastTextMode.setString(Math.floor(i.lx), Math.floor(i.ly), displayStrings.has(i.id) ? displayStrings.get(i.id) : '!'));\n\n\n  let lpx = player.x - offsetx;\n  lpx += viewWidth / 2;\n  offsetx += easing * (lpx - (viewWidth / 2));\n\n  offsetx %= modulus;\n\n\n  // let e = checkSeekingInvaders(invaders.filter(i => i.state == InvaderState.seeking), humans);\n\n\n}\n\n"]}