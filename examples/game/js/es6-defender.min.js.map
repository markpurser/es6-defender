{"version":3,"sources":["fast-text-mode.js"],"names":["FastTextMode","options","_this","Object","keys","defaults","forEach","key","_options","Promise","resolve","reject","_parentContainer","PIXI","Container","_tileTextures","pixiOptions","clearBeforeRender","preserveDrawingBuffer","resolution","view","renderCanvas","_renderer","autoDetectRenderer","renderCanvasSize","width","height","backgroundColor","_stats","fpsText","Text","font","fill","fpsTimer","currentFrameCount","loader","add","tilesheetImage","load","resources","numTilesX","tilesheet","texture","tileWidthPx","numTilesY","tileHeightPx","x","y","rect","Rectangle","Texture","_worldSpriteContainer","SpriteGrid","viewWidth","viewHeight","codePointAt","addChild","getSpriteContainer","displayStats","updateStats","render","sprites","getSprites","index","tileCode","colour","Math","floor","random","tint","tileString","X","c","length","set","number","setString","toString","stats","Date","getTime","rendererTypeStr","WebGLRenderer","text","VERSION","gridWidth","gridHeight","tileTexture","spriteContainer","sprite","Sprite","position"],"mappings":"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","file":"es6-defender.min.js","sourcesContent":["/*\n* FastTextMode\n*\n* Copyright (C) 2016  Mark Purser\n* Released under the MIT license\n* http://github.com/markpurser/fast-text-mode/LICENSE\n*\n* Tile rendering based on\n* https://github.com/jice-nospam/yendor.ts\n* Copyright (c) 2014 Jice\n*/\n\nclass FastTextMode {\n\n    init(options) {\n        var _this = this;\n\n        options = options || {};\n        Object.keys( FastTextMode.defaults ).forEach( function( key ) {\n            if (!(key in options)) options[ key ] = FastTextMode.defaults[ key ];\n        });\n\n        _this._options = options;\n\n        return new Promise(function(resolve, reject) {\n            // create a new instance of a pixi container\n            _this._parentContainer = new PIXI.Container();\n\n            _this._tileTextures = [];\n\n            // create a renderer instance\n            var pixiOptions = {\n                clearBeforeRender: true,\n                preserveDrawingBuffer: false,\n                resolution: 1,\n                view: options.renderCanvas\n            };\n\n            _this._renderer = PIXI.autoDetectRenderer(\n                options.renderCanvasSize.width, options.renderCanvasSize.height, pixiOptions);\n            _this._renderer.backgroundColor = 0x0;\n\n            _this._stats = {\n                fpsText: new PIXI.Text('', {font: '24px Arial', fill: 0xff1010}),\n                fpsTimer: 0,\n                currentFrameCount: 0\n            };\n\n\n            var loader = PIXI.loader;\n            loader.add('tilesheet', options.tilesheetImage);\n\n            loader.load( function( loader, resources )\n            {\n                var numTilesX = resources.tilesheet.texture.width / options.tileWidthPx;\n                var numTilesY = resources.tilesheet.texture.height / options.tileHeightPx;\n\n                // init tile textures\n                for(var x = 0; x < numTilesX; x++)\n                {\n                    for(var y = 0; y < numTilesY; y++)\n                    {\n                        var rect = new PIXI.Rectangle(x * options.tileWidthPx, y * options.tileHeightPx, options.tileWidthPx, options.tileHeightPx);\n                        _this._tileTextures[x + y * numTilesX] = new PIXI.Texture(resources.tilesheet.texture, rect);\n                    }\n                }\n\n                _this._worldSpriteContainer = new SpriteGrid(\n                    options.viewWidth, options.viewHeight, options.tileWidthPx, options.tileHeightPx, _this._tileTextures[' '.codePointAt(0)]);\n\n                _this._parentContainer.addChild(_this._worldSpriteContainer.getSpriteContainer());\n                _this._parentContainer.addChild(_this._stats.fpsText);\n\n                resolve();\n            });\n        });\n    }\n\n    render() {\n        if(this._options.displayStats)\n        {\n            this.updateStats(this._stats);\n        }\n\n        // render\n        this._renderer.render(this._parentContainer);\n\n        // clear screen\n        var sprites = this._worldSpriteContainer.getSprites();\n        for(var x = 0; x < this._options.viewWidth; x++)\n        {\n            for(var y = 0; y < this._options.viewHeight; y++)\n            {\n                var index = x + y * this._options.viewWidth;\n                sprites[index].texture = this._tileTextures[32];\n            }\n        }\n    }\n\n    set(x, y, tileCode, colour = 0xffffff) {\n        if(x < 0 || x >= this._options.viewWidth || y < 0 || y >= this._options.viewHeight) return;\n\n        if(typeof(tileCode) === 'string')\n        {\n            tileCode = tileCode.codePointAt(0);\n        }\n        var index = x + y * this._options.viewWidth;\n        this._worldSpriteContainer.getSprites()[index].texture = this._tileTextures[tileCode];\n\n        if( colour == -1) colour = Math.floor(Math.random() * 0xffffff);\n        this._worldSpriteContainer.getSprites()[index].tint = colour;\n    }\n\n    setString(x, y, tileString, colour = 0xffffff) {\n        var X = x;\n        for(var c = 0; c < tileString.length; c++) {\n            var tileCode = tileString.codePointAt(c);\n            if(tileCode == 10) {\n                y++;\n                x = X;\n            }\n            else {\n                this.set(x, y, tileCode, colour);\n                x++;\n            }\n        }\n    }\n\n    setNumber(x, y, number, colour = 0xffffff) {\n        this.setString(x, y, number.toString(), colour);\n    }\n\n    updateStats(stats) {\n        stats.currentFrameCount++;\n        if( stats.fpsTimer === 0 )\n        {\n            stats.fpsTimer = new Date().getTime();\n        }\n        else if( new Date().getTime() - stats.fpsTimer > 1000 )\n        {\n            var rendererTypeStr = 'Canvas';\n            if(this._renderer instanceof PIXI.WebGLRenderer)\n            {\n                rendererTypeStr = 'WebGL';\n            }\n            stats.fpsText.text = 'fps: ' + stats.currentFrameCount + '\\npixi: ' + PIXI.VERSION + '\\nRenderer: ' + rendererTypeStr;\n            stats.fpsTimer = new Date().getTime();\n            stats.currentFrameCount = 0;\n        }\n    }\n}\n\nFastTextMode.defaults = {\n    renderCanvasSize: {width: 1600, height: 900},\n    tilesheetImage: \"assets/terminal.png\",\n    tileWidthPx: 8,\n    tileHeightPx: 8,\n    viewWidth: 128,\n    viewHeight: 128,\n    displayStats: true\n}\n\nclass SpriteGrid {\n\n    constructor(gridWidth, gridHeight, tileWidthPx, tileHeightPx, tileTexture) {\n\n        this.spriteContainer = new PIXI.Container();\n        this.sprites = [];\n\n        // init grid\n        for(var x = 0; x < gridWidth; x++)\n        {\n            for(var y = 0; y < gridHeight; y++)\n            {\n                var sprite = new PIXI.Sprite(tileTexture);\n                sprite.position.x = x * tileWidthPx;\n                sprite.position.y = y * tileHeightPx;\n                sprite.width = tileWidthPx;\n                sprite.height = tileHeightPx;\n                this.sprites[x + y * gridWidth] = sprite;\n                this.spriteContainer.addChild(sprite);\n            }\n        }\n    }\n\n    getSpriteContainer() {\n        return this.spriteContainer;\n    }\n\n    getSprites() {\n        return this.sprites;\n    }\n}\n\n"]}