{"version":3,"sources":["es6-defender.js"],"names":["PlayerState","Object","freeze","faceLeft","faceRight","exploding","InvaderState","seeking","locked","abducting","mutant","Event","abducted","mutated","dead","remove","easing","playerAccel","playerDamping","halfmodulusx","modulusx","projectileLifetime","Global","viewWidth","viewHeight","StateVector","id","x","y","xdot","ydot","Player","state","t_startState","sideLen","graphic","Invader","Human","Projectile","t_spawned","wrapx","updatePlayerPosition","sv","input","leftright","updown","updatePlayerState","player","updateInvaderPosition","targetx","targety","a","Math","random","updateInvaders","invaders","invaderTargets","map","has","i","get","humanXDot","updateInvaderState","findIndex","updateHumanPosition","updateHumans","humans","updateProjectilePosition","updateProjectiles","projectiles","cartesianProduct2","arr1","arr2","e1","e2","reduce","arr","e","concat","toTuples","fst","snd","xoverlap","x1","size1","x2","size2","yoverlap","y1","y2","collided","detectCollisions","svArr1","svArr2","filter","svPair","id1","collidedPair","id2","checkSeekingInvader","invader","inRangeHumans","h","length","event","invaderId","humanId","checkHitInvaders","checkProjectiles","t","p","toLocal","lx","offsetx","ly","gx_debug","clip","lcoords","objects","graphics","o","splice","delete","initArray","n","f","Array","fill","targetoffsetx","playerId","floor","projectileId","Map","doGame","fastTextMode","debug","fire","push","projectileEvents","hitEvents","seekingInvaderEvents","allEvents","set","displacementList","displacement","displayList","setString","setNumber"],"mappings":";;;;;;;;;;AACA,IAAIA,cAAcC,OAAOC,MAAP,CAAc,EAACC,UAAS,CAAV,EAAaC,WAAU,CAAvB,EAA0BC,WAAU,CAApC,EAAd,CAAlB;;AAEA,IAAIC,eAAeL,OAAOC,MAAP,CAAc,EAACK,SAAQ,CAAT,EAAYC,QAAO,CAAnB,EAAsBC,WAAU,CAAhC,EAAmCC,QAAO,CAA1C,EAA6CL,WAAU,CAAvD,EAAd,CAAnB;;AAEA,IAAIM,QAAQV,OAAOC,MAAP,CAAc,EAACM,QAAO,CAAR,EAAWI,UAAS,CAApB,EAAuBC,SAAQ,CAA/B,EAAkCC,MAAK,CAAvC,EAA0CC,QAAO,CAAjD,EAAd,CAAZ;;AAEA,IAAIC,SAAS,IAAb;AACA,IAAIC,cAAc,IAAlB;AACA,IAAIC,gBAAgB,GAApB;AACA,IAAIC,eAAe,GAAnB;AACA,IAAIC,WAAW,GAAf;AACA,IAAIC,qBAAqB,EAAzB;;AAEA,IAAIC,SAAS,EAACC,WAAU,CAAX,EAAcC,YAAW,CAAzB,EAAb;;IAEMC,W,GAEJ,qBAAYC,EAAZ,EAAgBC,CAAhB,EAAmBC,CAAnB,EAA0C;AAAA,MAApBC,IAAoB,uEAAb,CAAa;AAAA,MAAVC,IAAU,uEAAH,CAAG;;AAAA;;AACxC,OAAKJ,EAAL,GAAUA,EAAV;AACA,OAAKC,CAAL,GAASA,CAAT;AACA,OAAKC,CAAL,GAASA,CAAT;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACD,C;;IAGGC,M;;;AAEJ,kBAAYL,EAAZ,EAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBI,KAAtB,EAA6BC,YAA7B,EAA2C;AAAA;;AAAA,gHACnCP,EADmC,EAC/BC,CAD+B,EAC5BC,CAD4B;;AAGzC,UAAKI,KAAL,GAAaA,KAAb;AACA,UAAKC,YAAL,GAAoBA,YAApB;AAJyC;AAK1C;;;EAPkBR,W;;AAUrBM,OAAOG,OAAP,GAAiB,CAAjB;AACAH,OAAOI,OAAP,GAAiB,CAAC,UAAD,EAAa,WAAb,CAAjB;;IAEMC,O;;;AAEJ,mBAAYV,EAAZ,EAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBI,KAAtB,EAA6BC,YAA7B,EAA2C;AAAA;;AAAA,mHACnCP,EADmC,EAC/BC,CAD+B,EAC5BC,CAD4B;;AAGzC,WAAKI,KAAL,GAAaA,KAAb;AACA,WAAKC,YAAL,GAAoBA,YAApB;AAJyC;AAK1C;;;EAPmBR,W;;AAUtBW,QAAQF,OAAR,GAAkB,CAAlB;AACAE,QAAQD,OAAR,GAAkB,UAAlB;;IAEME,K;;;AAEJ,iBAAYX,EAAZ,EAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBC,IAAtB,EAA4B;AAAA;;AAAA,yGACpBH,EADoB,EAChBC,CADgB,EACbC,CADa,EACVC,IADU;AAE3B;;;EAJiBJ,W;;AAOpBY,MAAMH,OAAN,GAAgB,CAAhB;AACAG,MAAMF,OAAN,GAAgB,GAAhB;;IAEMG,U;;;AAEJ,sBAAYZ,EAAZ,EAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBC,IAAtB,EAA4BC,IAA5B,EAAkCS,SAAlC,EAA6C;AAAA;;AAAA,yHACrCb,EADqC,EACjCC,CADiC,EAC9BC,CAD8B,EAC3BC,IAD2B,EACrBC,IADqB;;AAG3C,WAAKS,SAAL,GAAiBA,SAAjB;AAH2C;AAI5C;;;EANsBd,W;;AASzBa,WAAWJ,OAAX,GAAqB,CAArB;AACAI,WAAWH,OAAX,GAAqB,GAArB;;AAEA,IAAIK,QAAQ,SAARA,KAAQ,CAACb,CAAD;AAAA,SAAO,CAACA,IAAIP,QAAL,IAAiBA,QAAxB;AAAA,CAAZ;;AAEA,IAAIqB,uBAAuB,SAAvBA,oBAAuB,CAACC,EAAD,EAAKC,KAAL,EAAe;AACxCD,KAAGb,IAAH,IAAWZ,cAAc0B,MAAMC,SAA/B;AACAF,KAAGZ,IAAH,IAAWb,cAAc0B,MAAME,MAA/B;;AAEAH,KAAGb,IAAH,IAAWX,gBAAgB,CAACwB,GAAGb,IAA/B;AACAa,KAAGZ,IAAH,IAAWZ,gBAAgB,CAACwB,GAAGZ,IAA/B;;AAEAY,KAAGf,CAAH,GAAOR,YAAP;AACAuB,KAAGd,CAAH,IAAQc,GAAGZ,IAAX;;AAEA,MAAGY,GAAGd,CAAH,GAAO,CAAV,EAAac,GAAGd,CAAH,GAAO,CAAP;AACb,MAAGc,GAAGd,CAAH,GAAON,OAAOE,UAAP,GAAoB,CAA9B,EAAiCkB,GAAGd,CAAH,GAAON,OAAOE,UAAP,GAAoB,CAA3B;;AAEjC,SAAOkB,EAAP;AACD,CAdD;;AAgBA,IAAII,oBAAoB,SAApBA,iBAAoB,CAACC,MAAD,EAASJ,KAAT,EAAmB;AACzC,MAAGA,MAAMC,SAAN,IAAmB,CAAtB,EAAyB;AACvBG,WAAOf,KAAP,GAAgBW,MAAMC,SAAN,IAAmB,CAAC,CAArB,GAA0B5C,YAAYG,QAAtC,GAAiDH,YAAYI,SAA5E;AACD;AACF,CAJD;;AAMA,IAAI4C,wBAAwB,SAAxBA,qBAAwB,CAACN,EAAD,EAAKV,KAAL,EAAYiB,OAAZ,EAAqBC,OAArB,EAAiC;AAAA;;AAC3D,MAAIC,IAAI,oEACH7C,aAAaC,OADV,EACoB,YAAM;AAC5BmC,OAAGb,IAAH,IAAW,QAAQuB,KAAKC,MAAL,KAAgB,GAAxB,CAAX;AACAX,OAAGZ,IAAH,IAAW,QAAQsB,KAAKC,MAAL,KAAgB,GAAxB,CAAX;AACAX,OAAGf,CAAH,IAAQe,GAAGb,IAAX;AACAa,OAAGd,CAAH,IAAQc,GAAGZ,IAAX;;AAEA,QAAGY,GAAGd,CAAH,GAAO,CAAV,EAAa;AAAEc,SAAGZ,IAAH,GAAU,CAACY,GAAGZ,IAAd,CAAoBY,GAAGd,CAAH,GAAO,CAAP;AAAW;AAC9C,QAAGc,GAAGd,CAAH,GAAQN,OAAOE,UAAP,GAAoB,CAA/B,EAAmC;AAAEkB,SAAGZ,IAAH,GAAU,CAACY,GAAGZ,IAAd,CAAoBY,GAAGd,CAAH,GAAQN,OAAOE,UAAP,GAAoB,CAA5B;AAAiC;AAC3F,GATG,0CAUHlB,aAAaE,MAVV,EAUmB,YAAM;AAC3BkC,OAAGb,IAAH,GAAUoB,OAAV;AACAP,OAAGZ,IAAH,GAAU,GAAV;;AAEAY,OAAGf,CAAH,IAAQe,GAAGb,IAAX;AACAa,OAAGd,CAAH,IAAQc,GAAGZ,IAAX;AACD,GAhBG,0BAiBJE,KAjBI,GAAR;;AAmBA,SAAOU,EAAP;AACD,CArBD;;AAuBA,IAAIY,iBAAiB,SAAjBA,cAAiB,CAACC,QAAD,EAAWC,cAAX;AAAA,SACnBD,SAASE,GAAT,CAAa,aAAK;AAChB,QAAIR,UAAU,CAAd;AACA,QAAGO,eAAeE,GAAf,CAAmBC,EAAEjC,EAArB,CAAH,EAA6B;AAC3BuB,gBAAUO,eAAeI,GAAf,CAAmBD,EAAEjC,EAArB,EAAyBmC,SAAnC;AACD;AACDb,0BAAsBW,CAAtB,EAAyBA,EAAE3B,KAA3B,EAAkCiB,OAAlC,EAA2C,CAA3C;AACD,GAND,CADmB;AAAA,CAArB;;AASA,IAAIa,qBAAqB,SAArBA,kBAAqB,CAACP,QAAD,EAAW7B,EAAX,EAAeM,KAAf,EAAyB;AAChD,MAAI2B,IAAIJ,SAASQ,SAAT,CAAmB;AAAA,WAAKJ,EAAEjC,EAAF,IAAQA,EAAb;AAAA,GAAnB,CAAR;AACA6B,WAASI,CAAT,EAAY3B,KAAZ,GAAoBA,KAApB;AACD,CAHD;;AAKA,IAAIgC,sBAAsB,SAAtBA,mBAAsB,CAACtB,EAAD,EAAQ;AAChCA,KAAGf,CAAH,IAAQe,GAAGb,IAAX;AACAa,KAAGd,CAAH,IAAQc,GAAGZ,IAAX;;AAEA,SAAOY,EAAP;AACD,CALD;;AAOA,IAAIuB,eAAe,SAAfA,YAAe,CAACC,MAAD;AAAA,SAAYA,OAAOT,GAAP,CAAWO,mBAAX,CAAZ;AAAA,CAAnB;;AAEA,IAAIG,2BAA2B,SAA3BA,wBAA2B,CAACzB,EAAD,EAAQ;AACrCA,KAAGf,CAAH,IAAQe,GAAGb,IAAX;AACAa,KAAGd,CAAH,IAAQc,GAAGZ,IAAX;;AAEA,SAAOY,EAAP;AACD,CALD;;AAOA,IAAI0B,oBAAoB,SAApBA,iBAAoB,CAACC,WAAD;AAAA,SAAiBA,YAAYZ,GAAZ,CAAgBU,wBAAhB,CAAjB;AAAA,CAAxB;;AAEA,IAAIG,oBAAoB,SAApBA,iBAAoB,CAACC,IAAD,EAAOC,IAAP;AAAA,SACtBD,KAAKd,GAAL,CAAS;AAAA,WAAMe,KAAKf,GAAL,CAAS;AAAA,aAAM,CAACgB,EAAD,EAAKC,EAAL,CAAN;AAAA,KAAT,CAAN;AAAA,GAAT,EAAyCC,MAAzC,CAAgD,UAACC,GAAD,EAAMC,CAAN;AAAA,WAAYD,IAAIE,MAAJ,CAAWD,CAAX,CAAZ;AAAA,GAAhD,EAA2E,EAA3E,CADsB;AAAA,CAAxB;;AAGA,IAAIE,WAAW,SAAXA,QAAW,CAACH,GAAD;AAAA,SACbA,IAAInB,GAAJ,CAAQ;AAAA,WAAM,EAACuB,KAAI7B,EAAE,CAAF,CAAL,EAAW8B,KAAI9B,EAAE,CAAF,CAAf,EAAN;AAAA,GAAR,CADa;AAAA,CAAf;;AAIA,IAAI+B,WAAW,SAAXA,QAAW,CAACC,EAAD,EAAKC,KAAL,EAAYC,EAAZ,EAAgBC,KAAhB;AAAA,SACZD,KAAMF,KAAKC,KAAX,IACAD,KAAME,KAAKC,KAFC;AAAA,CAAf;;AAIA,IAAIC,WAAW,SAAXA,QAAW,CAACC,EAAD,EAAKJ,KAAL,EAAYK,EAAZ,EAAgBH,KAAhB;AAAA,SACZG,KAAMD,KAAKJ,KAAX,IACAI,KAAMC,KAAKH,KAFC;AAAA,CAAf;;AAIA,IAAII,WAAW,SAAXA,QAAW,OAAeN,KAAf,SAAoCE,KAApC;AAAA,MAAIH,EAAJ,QAAExD,CAAF;AAAA,MAAU6D,EAAV,QAAQ5D,CAAR;AAAA,MAAyByD,EAAzB,SAAuB1D,CAAvB;AAAA,MAA+B8D,EAA/B,SAA6B7D,CAA7B;AAAA,SACZsD,SAASC,EAAT,EAAaC,KAAb,EAAoBC,EAApB,EAAwBC,KAAxB,KAAkCC,SAASC,EAAT,EAAaJ,KAAb,EAAoBK,EAApB,EAAwBH,KAAxB,CADtB;AAAA,CAAf;;AAIA,IAAIK,mBAAmB,SAAnBA,gBAAmB,CAACC,MAAD,EAASR,KAAT,EAAgBS,MAAhB,EAAwBP,KAAxB;AAAA,SACrBP,SAAST,kBAAkBsB,MAAlB,EAA0BC,MAA1B,CAAT,EACGC,MADH,CACU;AAAA,WAAUJ,SAASK,OAAOf,GAAhB,EAAqBI,KAArB,EAA4BW,OAAOd,GAAnC,EAAwCK,KAAxC,CAAV;AAAA,GADV,EAEG7B,GAFH,CAEO;AAAA,WAAiB,EAACuC,KAAIC,aAAajB,GAAb,CAAiBtD,EAAtB,EAA0BwE,KAAID,aAAahB,GAAb,CAAiBvD,EAA/C,EAAjB;AAAA,GAFP,CADqB;AAAA,CAAvB;;AAMA,IAAIyE,sBAAsB,SAAtBA,mBAAsB,CAACC,OAAD,EAAUlC,MAAV,EAAqB;AAC7C,MAAImC,gBAAgBnC,OAAO4B,MAAP,CAAc;AAAA,WAAKZ,SAASkB,QAAQzE,CAAjB,EAAoBS,QAAQF,OAA5B,EAAqCoE,EAAE3E,CAAvC,EAA0CU,MAAMH,OAAhD,CAAL;AAAA,GAAd,CAApB;AACA,MAAGmE,cAAcE,MAAd,GAAuB,CAA1B,EAA6B;AAC3B,QAAGnD,KAAKC,MAAL,KAAgB,IAAnB,EAAyB;AACvB,aAAO,CAAC,EAACmD,OAAM7F,MAAMH,MAAb,EAAqBiG,WAAUL,QAAQ1E,EAAvC,EAA2CgF,SAAQL,cAAc,CAAd,EAAiB3E,EAApE,EAAwEmC,WAAUwC,cAAc,CAAd,EAAiBxE,IAAnG,EAAD,CAAP;AACD;AACF;AACD,SAAO,EAAP;AACD,CARD;;AAUA,IAAI8E,mBAAmB,SAAnBA,gBAAmB,CAACpD,QAAD,EAAWc,WAAX;AAAA,SACrBsB,iBAAiBpC,QAAjB,EAA2BnB,QAAQF,OAAnC,EAA4CmC,WAA5C,EAAyD/B,WAAWJ,OAApE,EACGuB,GADH,CACO,wBAAgB;AAAEwC,iBAAaO,KAAb,GAAmB7F,MAAMG,IAAzB,CAA+B,OAAOmF,YAAP;AAAsB,GAD9E,CADqB;AAAA,CAAvB;;AAKA,IAAIW,mBAAmB,SAAnBA,gBAAmB,CAACvC,WAAD,EAAcwC,CAAd;AAAA,SACrBxC,YAAYyB,MAAZ,CAAmB;AAAA,WAAMe,IAAIC,EAAEvE,SAAP,GAAoBlB,kBAAzB;AAAA,GAAnB,EACGoC,GADH,CACO;AAAA,WAAM,EAAC+C,OAAM7F,MAAMI,MAAb,EAAqBW,IAAGoF,EAAEpF,EAA1B,EAAN;AAAA,GADP,CADqB;AAAA,CAAvB;;AAKA,IAAIqF,UAAU,SAAVA,OAAU,KAAM;AAClB,MAAIC,KAAKtE,GAAGf,CAAH,GAAOsF,OAAhB;AACAD,QAAM1F,OAAOC,SAAP,GAAmB,CAAzB;;AAEA,MAAI2F,KAAKxE,GAAGd,CAAZ;;AAEA,SAAO,EAACF,IAAGgB,GAAGhB,EAAP,EAAWsF,IAAGA,EAAd,EAAkBE,IAAGA,EAArB,EAAyBC,UAASzE,GAAGf,CAArC,EAAP;AACD,CAPD;;AASA,IAAIyF,OAAO,SAAPA,IAAO;AAAA,SAAYC,QAAQL,EAAR,IAAc,CAAf,IAAsBK,QAAQH,EAAR,GAAa5F,OAAOC,SAArD;AAAA,CAAX;;AAEA,IAAIR,SAAS,SAATA,MAAS,CAACuG,OAAD,EAAU5F,EAAV,EAAc6F,QAAd,EAA2B;AACtC,MAAIC,IAAIF,QAAQvD,SAAR,CAAkB;AAAA,WAAKyD,EAAE9F,EAAF,IAAQA,EAAb;AAAA,GAAlB,CAAR;AACA4F,UAAQG,MAAR,CAAeD,CAAf,EAAkB,CAAlB;AACAD,WAASG,MAAT,CAAgBhG,EAAhB;AACD,CAJD;;AAQA,IAAIiG,YAAY,SAAZA,SAAY,CAACC,CAAD,EAAIC,CAAJ;AAAA,SAAUC,MAAMF,CAAN,EAASG,IAAT,GAAgBtE,GAAhB,CAAoBoE,CAApB,CAAV;AAAA,CAAhB;;AAGA,IAAIZ,UAAU,CAAd;AACA,IAAIe,gBAAgB,CAApB;AACA,IAAIC,WAAW,CAAf;AACA,IAAIxB,YAAY,GAAhB;AACA,IAAI1D,SAAS,IAAIhB,MAAJ,CAAWkG,QAAX,EAAqB,CAArB,EAAwB,KAAK,CAA7B,EAAgCjI,YAAYI,SAA5C,EAAuD,CAAvD,CAAb;AACA,IAAImD,WAAWoE,UAAU,CAAV,EAAa;AAAA,SAAK,IAAIvF,OAAJ,CAAYqE,WAAZ,EAAyBrD,KAAK8E,KAAL,CAAW9E,KAAKC,MAAL,KAAgBjC,QAA3B,CAAzB,EAA+D,KAAK,CAApE,EAAuEd,aAAaC,OAApF,EAA6F,CAA7F,CAAL;AAAA,CAAb,CAAf;AACA,IAAImG,UAAU,GAAd;AACA,IAAIxC,SAASyD,UAAU,EAAV,EAAc;AAAA,SAAK,IAAItF,KAAJ,CAAUqE,SAAV,EAAqBtD,KAAK8E,KAAL,CAAW9E,KAAKC,MAAL,KAAgBjC,QAA3B,CAArB,EAA2D,EAA3D,EAA+D,OAAOgC,KAAKC,MAAL,KAAgB,GAAvB,CAA/D,CAAL;AAAA,CAAd,CAAb;AACA,IAAI8E,eAAe,GAAnB;AACA,IAAI9D,cAAc,EAAlB;AACA,IAAIkD,WAAW,IAAIa,GAAJ,EAAf;AACA,IAAI5E,iBAAiB,IAAI4E,GAAJ,EAArB;;AAEA,IAAIvB,IAAI,CAAR;;AAEA,IAAIwB,SAAS,SAATA,MAAS,CAACC,YAAD,EAAe/G,SAAf,EAA0BC,UAA1B,EAAsCmB,KAAtC,EAA+D;AAAA,MAAlB4F,KAAkB,uEAAV,KAAU;;;AAE1EjH,SAAOC,SAAP,GAAmBA,SAAnB;AACAD,SAAOE,UAAP,GAAoBA,UAApB;;AAEAsB,oBAAkBC,MAAlB,EAA0BJ,KAA1B;;AAEA,MAAGA,MAAM6F,IAAT,EAAe;AACbnE,gBAAYoE,IAAZ,CAAiB,IAAInG,UAAJ,CAAe6F,cAAf,EAA+BpF,OAAOpB,CAAtC,EAAyCoB,OAAOnB,CAAP,GAAS,CAAlD,EAAsDmB,OAAOf,KAAP,IAAgBhC,YAAYG,QAA7B,GAAyC,CAAC,CAA1C,GAA8C,CAAnG,EAAsG,CAAtG,EAAyG0G,CAAzG,CAAjB;AACA,QAAGsB,gBAAgB,IAAnB,EAAyBA,eAAe,GAAf;AAC1B;;AAED,MAAIO,mBAAmB9B,iBAAiBvC,WAAjB,EAA8BwC,CAA9B,CAAvB;;AAEA,MAAI8B,YAAYhC,iBAAiBpD,QAAjB,EAA2Bc,WAA3B,CAAhB;;AAEA,MAAIuE,uBAAuBrF,SAASuC,MAAT,CAAgB;AAAA,WAAKnC,EAAE3B,KAAF,IAAW1B,aAAaC,OAA7B;AAAA,GAAhB,EAAsDoE,MAAtD,CAA6D,UAACC,GAAD,EAAMjB,CAAN;AAAA,WAAYiB,IAAIE,MAAJ,CAAWqB,oBAAoBxC,CAApB,EAAuBO,MAAvB,CAAX,CAAZ;AAAA,GAA7D,EAAqH,EAArH,CAA3B;;AAEA,MAAI2E,YAAY,GAAG/D,MAAH,CAAU4D,gBAAV,EAA4BC,SAA5B,EAAuCC,oBAAvC,CAAhB;AACAC,YAAU/C,MAAV,CAAiB;AAAA,WAAKjB,EAAE2B,KAAF,IAAW7F,MAAMI,MAAtB;AAAA,GAAjB,EAA+C0C,GAA/C,CAAmD;AAAA,WAAK1C,OAAOsD,WAAP,EAAoBQ,EAAEnD,EAAtB,EAA0B6F,QAA1B,CAAL;AAAA,GAAnD;AACAsB,YAAU/C,MAAV,CAAiB;AAAA,WAAKjB,EAAE2B,KAAF,IAAW7F,MAAMG,IAAtB;AAAA,GAAjB,EAA6C2C,GAA7C,CAAiD;AAAA,WAAK1C,OAAOwC,QAAP,EAAiBsB,EAAEmB,GAAnB,EAAwBuB,QAAxB,CAAL;AAAA,GAAjD;AACAsB,YAAU/C,MAAV,CAAiB;AAAA,WAAKjB,EAAE2B,KAAF,IAAW7F,MAAMH,MAAtB;AAAA,GAAjB,EAA+CiD,GAA/C,CAAmD,aAAK;AAAEK,uBAAmBP,QAAnB,EAA6BsB,EAAE4B,SAA/B,EAA0CnG,aAAaE,MAAvD,EAAgEgD,eAAesF,GAAf,CAAmBjE,EAAE4B,SAArB,EAAgC5B,CAAhC;AAAqC,GAA/J;;AAGA0C,WAASuB,GAAT,CAAa/F,OAAOrB,EAApB,EAAyBqB,OAAOf,KAAP,IAAgBhC,YAAYG,QAA7B,GAAyC4B,OAAOI,OAAP,CAAe,CAAf,CAAzC,GAA6DJ,OAAOI,OAAP,CAAe,CAAf,CAArF;;AAEAoB,WAASE,GAAT,CAAa;AAAA,WAAK8D,SAASuB,GAAT,CAAanF,EAAEjC,EAAf,EAAmBU,QAAQD,OAA3B,CAAL;AAAA,GAAb;AACA+B,SAAOT,GAAP,CAAW;AAAA,WAAK8D,SAASuB,GAAT,CAAaxC,EAAE5E,EAAf,EAAmBW,MAAMF,OAAzB,CAAL;AAAA,GAAX;AACAkC,cAAYZ,GAAZ,CAAgB;AAAA,WAAK8D,SAASuB,GAAT,CAAahC,EAAEpF,EAAf,EAAmBY,WAAWH,OAA9B,CAAL;AAAA,GAAhB;;AAGAM,uBAAqBM,MAArB,EAA6BJ,KAA7B;AACAW,iBAAeC,QAAf,EAAyBC,cAAzB;AACAS,eAAaC,MAAb;AACAE,oBAAkBC,WAAlB;;AAEA,MAAI0E,mBAAmB,GAAGjE,MAAH,CAAUvB,QAAV,EAAoBW,MAApB,EAA4BG,WAA5B,CAAvB;;AAEA,MAAI2E,eAAejG,OAAOlB,IAA1B;AACAkH,mBAAiBtF,GAAjB,CAAqB,aAAK;AAAC+D,MAAE7F,CAAF,GAAMa,MAAMgF,EAAE7F,CAAF,GAAMqH,YAAZ,CAAN;AAAgC,GAA3D;;AAEA,MAAIC,cAAcF,iBAAiBjE,MAAjB,CAAwB/B,MAAxB,CAAlB;;AAEAkG,cACGxF,GADH,CACOsD,OADP,EAEGjB,MAFH,CAEUsB,IAFV,EAGG3D,GAHH,CAGO,aAAK;AACR6E,iBAAaY,SAAb,CAAuB9F,KAAK8E,KAAL,CAAWvE,EAAEqD,EAAb,CAAvB,EAAyC5D,KAAK8E,KAAL,CAAWvE,EAAEuD,EAAb,CAAzC,EAA2DK,SAAS7D,GAAT,CAAaC,EAAEjC,EAAf,IAAqB6F,SAAS3D,GAAT,CAAaD,EAAEjC,EAAf,CAArB,GAA0C,GAArG;AACA,QAAG6G,KAAH,EAAU;AACR;AACAD,mBAAaa,SAAb,CAAuB/F,KAAK8E,KAAL,CAAWvE,EAAEqD,EAAb,CAAvB,EAAyC5D,KAAK8E,KAAL,CAAWvE,EAAEuD,EAAb,CAAzC,EAA2DvD,EAAEjC,EAA7D;AACA4G,mBAAaa,SAAb,CAAuB/F,KAAK8E,KAAL,CAAWvE,EAAEqD,EAAb,CAAvB,EAAyC5D,KAAK8E,KAAL,CAAWvE,EAAEuD,EAAF,GAAK,CAAhB,CAAzC,EAA6D9D,KAAK8E,KAAL,CAAWvE,EAAEwD,QAAb,CAA7D;AACD;AACF,GAVH;;AAaCpE,SAAOf,KAAP,IAAgBhC,YAAYG,QAA7B,GAAyC6H,gBAAgB7G,eAAe,EAAxE,GAA6E6G,gBAAgB7G,eAAe,EAA5G;AACA8F,aAAWjG,UAAUgH,gBAAgBf,OAA1B,CAAX;;AAEA;;AAEAJ;AACD,CA9DD","file":"es6-defender.min.js","sourcesContent":["\nlet PlayerState = Object.freeze({faceLeft:1, faceRight:2, exploding:3})\n\nlet InvaderState = Object.freeze({seeking:1, locked:2, abducting:3, mutant:4, exploding:5})\n\nlet Event = Object.freeze({locked:1, abducted:2, mutated:3, dead:4, remove:5})\n\nlet easing = 0.05;\nlet playerAccel = 0.15;\nlet playerDamping = 0.1;\nlet halfmodulusx = 256;\nlet modulusx = 512;\nlet projectileLifetime = 50;\n\nlet Global = {viewWidth:0, viewHeight:0};\n\nclass StateVector {\n  \n  constructor(id, x, y, xdot = 0, ydot = 0) {\n    this.id = id;\n    this.x = x;\n    this.y = y;\n    this.xdot = xdot;\n    this.ydot = ydot;\n  }\n}\n\nclass Player extends StateVector {\n\n  constructor(id, x, y, state, t_startState) {\n    super(id, x, y);\n\n    this.state = state;\n    this.t_startState = t_startState;\n  }\n}\n\nPlayer.sideLen = 3;\nPlayer.graphic = ['  /\\n<--', '\\\\  \\n-->']; \n\nclass Invader extends StateVector {\n  \n  constructor(id, x, y, state, t_startState) {\n    super(id, x, y);\n\n    this.state = state;\n    this.t_startState = t_startState;\n  }\n}\n\nInvader.sideLen = 2;\nInvader.graphic = '^^\\n[]\\n';\n\nclass Human extends StateVector {\n\n  constructor(id, x, y, xdot) {\n    super(id, x, y, xdot);\n  }\n}\n\nHuman.sideLen = 1;\nHuman.graphic = 'H';\n\nclass Projectile extends StateVector {\n\n  constructor(id, x, y, xdot, ydot, t_spawned) {\n    super(id, x, y, xdot, ydot);\n\n    this.t_spawned = t_spawned;\n  }\n}\n\nProjectile.sideLen = 1;\nProjectile.graphic = '-';\n\nlet wrapx = (x) => (x + modulusx) % modulusx;\n\nlet updatePlayerPosition = (sv, input) => {\n  sv.xdot += playerAccel * input.leftright;\n  sv.ydot += playerAccel * input.updown;\n\n  sv.xdot += playerDamping * -sv.xdot;\n  sv.ydot += playerDamping * -sv.ydot;\n\n  sv.x = halfmodulusx;\n  sv.y += sv.ydot;\n\n  if(sv.y < 0) sv.y = 0;\n  if(sv.y > Global.viewHeight - 5) sv.y = Global.viewHeight - 5;\n\n  return sv;\n}\n\nlet updatePlayerState = (player, input) => {\n  if(input.leftright != 0) {\n    player.state = (input.leftright == -1) ? PlayerState.faceLeft : PlayerState.faceRight;\n  }\n}\n\nlet updateInvaderPosition = (sv, state, targetx, targety) => {\n  let a = {\n      [InvaderState.seeking]: () => {\n        sv.xdot += 0.01 * (Math.random() - 0.5);\n        sv.ydot += 0.01 * (Math.random() - 0.5);\n        sv.x += sv.xdot;\n        sv.y += sv.ydot;\n\n        if(sv.y < 5) { sv.ydot = -sv.ydot; sv.y = 5; }\n        if(sv.y > (Global.viewHeight - 5)) { sv.ydot = -sv.ydot; sv.y = (Global.viewHeight - 5); }\n      },\n      [InvaderState.locked]: () => {\n        sv.xdot = targetx;\n        sv.ydot = 0.1;\n\n        sv.x += sv.xdot;\n        sv.y += sv.ydot;\n      }      \n    }[state]();\n\n  return sv;\n}\n\nlet updateInvaders = (invaders, invaderTargets) =>\n  invaders.map(i => {\n    let targetx = 0;\n    if(invaderTargets.has(i.id)) {\n      targetx = invaderTargets.get(i.id).humanXDot;\n    }\n    updateInvaderPosition(i, i.state, targetx, 0);\n  });\n\nlet updateInvaderState = (invaders, id, state) => {\n  let i = invaders.findIndex(i => i.id == id);\n  invaders[i].state = state;\n}\n\nlet updateHumanPosition = (sv) => {\n  sv.x += sv.xdot;\n  sv.y += sv.ydot;\n\n  return sv;\n}\n\nlet updateHumans = (humans) => humans.map(updateHumanPosition);\n\nlet updateProjectilePosition = (sv) => {\n  sv.x += sv.xdot;\n  sv.y += sv.ydot;\n\n  return sv;\n}\n\nlet updateProjectiles = (projectiles) => projectiles.map(updateProjectilePosition);\n\nlet cartesianProduct2 = (arr1, arr2) =>\n  arr1.map(e1 => arr2.map(e2 => [e1, e2])).reduce((arr, e) => arr.concat(e), []);\n\nlet toTuples = (arr) =>\n  arr.map(a => ({fst:a[0], snd:a[1]}));\n\n\nlet xoverlap = (x1, size1, x2, size2) =>\n  (x2 < (x1 + size1) &&\n   x1 < (x2 + size2));\n\nlet yoverlap = (y1, size1, y2, size2) =>\n  (y2 < (y1 + size1) &&\n   y1 < (y2 + size2));\n\nlet collided = ({x:x1, y:y1}, size1, {x:x2, y:y2}, size2) =>\n  (xoverlap(x1, size1, x2, size2) && yoverlap(y1, size1, y2, size2));\n\n\nlet detectCollisions = (svArr1, size1, svArr2, size2) =>\n  toTuples(cartesianProduct2(svArr1, svArr2))\n    .filter(svPair => collided(svPair.fst, size1, svPair.snd, size2))\n    .map(collidedPair => ({id1:collidedPair.fst.id, id2:collidedPair.snd.id}));\n\n\nlet checkSeekingInvader = (invader, humans) => {\n  let inRangeHumans = humans.filter(h => xoverlap(invader.x, Invader.sideLen, h.x, Human.sideLen));\n  if(inRangeHumans.length > 0) {\n    if(Math.random() < 0.01) {\n      return [{event:Event.locked, invaderId:invader.id, humanId:inRangeHumans[0].id, humanXDot:inRangeHumans[0].xdot}];\n    }\n  }\n  return [];\n}\n\nlet checkHitInvaders = (invaders, projectiles) =>\n  detectCollisions(invaders, Invader.sideLen, projectiles, Projectile.sideLen)\n    .map(collidedPair => { collidedPair.event=Event.dead; return collidedPair; });\n\n\nlet checkProjectiles = (projectiles, t) =>\n  projectiles.filter(p => (t - p.t_spawned) > projectileLifetime)\n    .map(p => ({event:Event.remove, id:p.id}));\n\n\nlet toLocal = sv => {\n  let lx = sv.x - offsetx;\n  lx += Global.viewWidth / 2;\n\n  let ly = sv.y;\n\n  return {id:sv.id, lx:lx, ly:ly, gx_debug:sv.x};\n}\n\nlet clip = lcoords => (lcoords.lx >= 0) && (lcoords.ly < Global.viewWidth);\n\nlet remove = (objects, id, graphics) => {\n  let o = objects.findIndex(o => o.id == id);\n  objects.splice(o, 1);\n  graphics.delete(id);\n}\n\n\n\nlet initArray = (n, f) => Array(n).fill().map(f);\n\n\nlet offsetx = 0;\nlet targetoffsetx = 0;\nlet playerId = 1;\nlet invaderId = 100;\nlet player = new Player(playerId, 0, 48 / 2, PlayerState.faceRight, 0);\nlet invaders = initArray(3, _ => new Invader(invaderId++, Math.floor(Math.random() * modulusx), 48 / 2, InvaderState.seeking, 0));\nlet humanId = 200;\nlet humans = initArray(10, _ => new Human(humanId++, Math.floor(Math.random() * modulusx), 47, 0.2 * (Math.random() - 0.5)));\nlet projectileId = 500;\nlet projectiles = [];\nlet graphics = new Map();\nlet invaderTargets = new Map();\n\nlet t = 0;\n\nlet doGame = (fastTextMode, viewWidth, viewHeight, input, debug = false) => {\n\n  Global.viewWidth = viewWidth;\n  Global.viewHeight = viewHeight;\n\n  updatePlayerState(player, input);\n\n  if(input.fire) {\n    projectiles.push(new Projectile(projectileId++, player.x, player.y+1, (player.state == PlayerState.faceLeft) ? -2 : 2, 0, t));\n    if(projectileId >= 1000) projectileId = 500;\n  }\n\n  let projectileEvents = checkProjectiles(projectiles, t);\n\n  let hitEvents = checkHitInvaders(invaders, projectiles);\n\n  let seekingInvaderEvents = invaders.filter(i => i.state == InvaderState.seeking).reduce((arr, i) => arr.concat(checkSeekingInvader(i, humans)), []);\n\n  let allEvents = [].concat(projectileEvents, hitEvents, seekingInvaderEvents);\n  allEvents.filter(e => e.event == Event.remove).map(e => remove(projectiles, e.id, graphics));\n  allEvents.filter(e => e.event == Event.dead).map(e => remove(invaders, e.id1, graphics));\n  allEvents.filter(e => e.event == Event.locked).map(e => { updateInvaderState(invaders, e.invaderId, InvaderState.locked); invaderTargets.set(e.invaderId, e); });\n\n\n  graphics.set(player.id, (player.state == PlayerState.faceLeft) ? Player.graphic[0] : Player.graphic[1]);\n\n  invaders.map(i => graphics.set(i.id, Invader.graphic));\n  humans.map(h => graphics.set(h.id, Human.graphic));\n  projectiles.map(p => graphics.set(p.id, Projectile.graphic));\n\n\n  updatePlayerPosition(player, input);\n  updateInvaders(invaders, invaderTargets);\n  updateHumans(humans);\n  updateProjectiles(projectiles);\n\n  let displacementList = [].concat(invaders, humans, projectiles);\n\n  let displacement = player.xdot;\n  displacementList.map(o => {o.x = wrapx(o.x - displacement)});\n\n  let displayList = displacementList.concat(player);\n\n  displayList\n    .map(toLocal)\n    .filter(clip)\n    .map(i => {\n      fastTextMode.setString(Math.floor(i.lx), Math.floor(i.ly), graphics.has(i.id) ? graphics.get(i.id) : '!')\n      if(debug) {\n        // overlay object id and x coordinate\n        fastTextMode.setNumber(Math.floor(i.lx), Math.floor(i.ly), i.id)\n        fastTextMode.setNumber(Math.floor(i.lx), Math.floor(i.ly+2), Math.floor(i.gx_debug))\n      }\n    });\n\n\n  (player.state == PlayerState.faceLeft) ? targetoffsetx = halfmodulusx - 16 : targetoffsetx = halfmodulusx + 16;\n  offsetx += easing * (targetoffsetx - offsetx);\n\n  // let e = checkSeekingInvaders(invaders.filter(i => i.state == InvaderState.seeking), humans);\n\n  t++;\n}\n\n"]}