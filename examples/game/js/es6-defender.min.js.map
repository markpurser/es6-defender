{"version":3,"sources":["es6-defender.js"],"names":["PlayerState","Object","freeze","faceLeft","faceRight","exploding","InvaderState","seeking","locked","abducting","mutant","Event","abducted","mutated","dead","remove","easing","playerAccel","playerDamping","modulus","projectileLifetime","StateVector","id","x","y","xdot","ydot","Player","state","t_startState","sideLen","graphic","Invader","Human","Projectile","t_spawned","updatePlayerPosition","sv","input","leftright","updown","updatePlayerState","player","updateInvaderPosition","targetx","targety","updateProjectilePosition","cartesianProduct2","arr1","arr2","map","fst","e1","snd","e2","reduce","arr","e","concat","collided","size1","size2","x1","y1","x2","y2","detectCollisions","svArr1","svArr2","filter","svPair","checkSeekingInvaders","invaders","humans","checkHitInvaders","projectiles","collidedPair","checkProjectiles","t","p","event","initArray","n","f","Array","fill","offsetx","playerId","invaderId","Math","floor","random","projectileId","graphics","Map","doGame","fastTextMode","viewWidth","viewHeight","toLocal","lx","ly","clip","lcoords","fire","push","projectileEvents","i","find","pe","splice","delete","set","displayArray","setString","has","get","lpx"],"mappings":"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","file":"es6-defender.min.js","sourcesContent":["\nlet PlayerState = Object.freeze({faceLeft:1, faceRight:2, exploding:3})\n\nlet InvaderState = Object.freeze({seeking:1, locked:2, abducting:3, mutant:4, exploding:5})\n\nlet Event = Object.freeze({locked:1, abducted:2, mutated:3, dead:4, remove:5})\n\nlet easing = 0.3;\nlet playerAccel = 0.1;\nlet playerDamping = 0.1;\nlet modulus = 512;\nlet projectileLifetime = 25;\n\nclass StateVector {\n  \n  constructor(id, x, y, xdot, ydot) {\n    this.id = id;\n    this.x = x;\n    this.y = y;\n    this.xdot = xdot;\n    this.ydot = ydot;\n  }\n}\n\nclass Player extends StateVector {\n\n  constructor(id, x, y, state, t_startState) {\n    super(id, x, y, 0, 0);\n\n    this.state = state;\n    this.t_startState = t_startState;\n  }\n}\n\nPlayer.sideLen = 3;\nPlayer.graphic = ['  /\\n<--', '\\\\  \\n-->']; \n\nclass Invader extends StateVector {\n  \n  constructor(id, x, y, state, t_startState) {\n    super(id, x, y, 0, 0);\n\n    this.state = state;\n    this.t_startState = t_startState;\n  }\n}\n\nInvader.sideLen = 2;\nInvader.graphic = '^^\\n[]\\n';\n\nclass Human extends StateVector {\n\n  constructor(id, x, y) {\n    super(id, x, y, 0, 0);\n  }\n}\n\nclass Projectile extends StateVector {\n\n  constructor(id, x, y, xdot, ydot, t_spawned) {\n    super(id, x, y, xdot, ydot);\n\n    this.t_spawned = t_spawned;\n  }\n}\n\nProjectile.sideLen = 1;\nProjectile.graphic = '-';\n\n\nlet updatePlayerPosition = (sv, input) => {\n  sv.xdot += playerAccel * input.leftright;\n  sv.ydot += playerAccel * input.updown;\n\n  sv.xdot += playerDamping * -sv.xdot;\n  sv.ydot += playerDamping * -sv.ydot;\n\n  sv.x += sv.xdot;\n  sv.y += sv.ydot;\n\n  sv.x %= modulus;\n\n  return sv;\n}\n\nlet updatePlayerState = (player, input) => {\n  if(input.leftright != 0) {\n    player.state = (input.leftright == -1) ? PlayerState.faceLeft : PlayerState.faceRight;\n  }\n}\n\nlet updateInvaderPosition = (sv, state, targetx, targety) => {\n  switch(state) {\n    case InvaderState.seeking:\n      sv.x++;\n      break;\n  }\n\n  sv.x %= modulus;\n\n  return sv;\n}\n\nlet updateProjectilePosition = (sv) => {\n  sv.x += sv.xdot;\n  sv.y += sv.ydot;\n\n  sv.x %= modulus;\n\n  return sv;\n}\n\nlet cartesianProduct2 = (arr1, arr2) =>\n  arr1.map(e1 => arr2.map(e2 => ({fst:e1, snd:e2}))).reduce((arr, e) => arr.concat(e), []);\n\n\nlet collided = ({x:x1, y:y1}, size1, {x:x2, y:y2}, size2) =>\n    (x2 < (x1 + size1) &&\n     x1 < (x2 + size2) &&\n     y2 < (y1 + size1) &&\n     y1 < (y2 + size2));\n\n\nlet detectCollisions = (svArr1, size1, svArr2, size2) =>\n  cartesianProduct2(svArr1, svArr2)\n    .filter(svPair => collided(svPair.fst, size1, svPair.snd, size2));\n\n\nlet checkSeekingInvaders = (invaders, humans) => {\n\n}\n\nlet checkHitInvaders = (invaders, projectiles) =>\n  detectCollisions(invaders, Invader.sideLen, projectiles, Projectile.sideLen)\n    .map(collidedPair => {Event.dead, collidedPair.fst.id, collidedPair.snd.id});\n\n\nlet checkProjectiles = (projectiles, t) =>\n  projectiles.filter(p => (t - p.t_spawned) > projectileLifetime)\n    .map(p => ({event:'remove', id:p.id}));\n\n\n\nlet initArray = (n, f) => Array(n).fill().map(f);\n\n\nlet offsetx = 0;\nlet playerId = 1;\nlet invaderId = 100;\nlet player = new Player(playerId, 0, 64 / 2, PlayerState.faceRight, 0);\nlet invaders = initArray(2, _ => new Invader(invaderId++, Math.floor(Math.random() * modulus), 64 / 2, InvaderState.seeking, 0));\n// humanId = 200;\n// let humans = initArray(10, _ => new Human(id++, 4, 1));\nlet projectileId = 500;\nlet projectiles = [];\nlet graphics = new Map();\n\nlet t = 0;\n\nlet doGame = (fastTextMode, viewWidth, viewHeight, input) => {\n\n  let toLocal = sv => {\n    let lx = sv.x - offsetx;\n    lx += viewWidth / 2;\n\n    if((lx < 0) || (lx >= viewWidth))\n    {\n      lx -= modulus;\n    }\n\n    let ly = sv.y;\n\n    return {id:sv.id, lx:lx, ly:ly};\n  }\n\n  let clip = lcoords => (lcoords.lx >= 0) && (lcoords.ly < viewWidth);\n\n\n  updatePlayerState(player, input);\n\n  if(input.fire) {\n    projectiles.push(new Projectile(projectileId++, player.x, player.y+1, (player.state == PlayerState.faceLeft) ? -1 : 1, 0, t));\n    if(projectileId >= 1000) projectileId = 500;\n  }\n\n  let projectileEvents = checkProjectiles(projectiles, t);\n\n  projectileEvents.map(pe => {\n    let i = projectiles.find(n => n.id == pe.id);\n    projectiles.splice(i, 1);\n    graphics.delete(pe.id);\n  });\n\n  graphics.set(player.id, (player.state == PlayerState.faceLeft) ? Player.graphic[0] : Player.graphic[1]);\n\n  invaders.map(i => graphics.set(i.id, Invader.graphic));\n  projectiles.map(p => graphics.set(p.id, Projectile.graphic));\n\n  let displayArray = [].concat(\n    updatePlayerPosition(player, input),\n    invaders.map(i => updateInvaderPosition(i, i.state, 0, 0)),\n    projectiles.map(updateProjectilePosition)\n  );\n\n  displayArray.map(toLocal)\n    .filter(clip)\n    .map(i => fastTextMode.setString(Math.floor(i.lx), Math.floor(i.ly), graphics.has(i.id) ? graphics.get(i.id) : '!'));\n\n\n  let lpx = player.x - offsetx;\n  lpx += viewWidth / 2;\n  offsetx += easing * (lpx - (viewWidth / 2));\n\n  offsetx %= modulus;\n\n\n\n  // let e = checkSeekingInvaders(invaders.filter(i => i.state == InvaderState.seeking), humans);\n\n  t++;\n}\n\n"]}