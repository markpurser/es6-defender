/**
 * @license
 * es6-defender.min.js - v0.0.1
 *
 * Licensed under the MIT License.
 * http://github.com/markpurser/es6-defender/LICENSE
*/

'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PlayerState = Object.freeze({ faceLeft: 1, faceRight: 2, exploding: 3 });

var InvaderState = Object.freeze({ seeking: 1, locked: 2, abducting: 3, mutant: 4, exploding: 5, explodingReleaseHuman: 6 });

var Event = Object.freeze({ locked: 1, abducted: 2, mutated: 3, dead: 4, removeProjectile: 5, removeHuman: 6, playerDead: 7 });

var easing = 0.05;
var playerAccel = 0.5;
var playerDamping = 0.2;
var halfmodulusx = 512;
var modulusx = 1024;
var projectileLifetime = 50;

var Global = { viewWidth: 0, viewHeight: 0 };

var StateVector = function StateVector(id, x, y) {
  var xdot = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var ydot = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

  _classCallCheck(this, StateVector);

  this.id = id;
  this.x = x;
  this.y = y;
  this.xdot = xdot;
  this.ydot = ydot;
};

var Player = function (_StateVector) {
  _inherits(Player, _StateVector);

  function Player(id, x, y, state, t_startState) {
    _classCallCheck(this, Player);

    var _this = _possibleConstructorReturn(this, (Player.__proto__ || Object.getPrototypeOf(Player)).call(this, id, x, y));

    _this.state = state;
    _this.t_startState = t_startState;
    return _this;
  }

  return Player;
}(StateVector);

Player.sideLen = 3;
Player.graphic = ['  /\n<--', '\\  \n-->'];

var Invader = function (_StateVector2) {
  _inherits(Invader, _StateVector2);

  function Invader(id, x, y, state, t_startState) {
    _classCallCheck(this, Invader);

    var _this2 = _possibleConstructorReturn(this, (Invader.__proto__ || Object.getPrototypeOf(Invader)).call(this, id, x, y));

    _this2.state = state;
    _this2.t_startState = t_startState;
    return _this2;
  }

  return Invader;
}(StateVector);

Invader.sideLen = 4;
Invader.graphic = '^^^^\n[[]]\n[[]]\n[[]]';
Invader.graphicAbducting = '^^^^\n[[]]\n[[]]\n[[]]\n HH \n HH';

var Human = function (_StateVector3) {
  _inherits(Human, _StateVector3);

  function Human(id, x, y, xdot, ydot) {
    _classCallCheck(this, Human);

    return _possibleConstructorReturn(this, (Human.__proto__ || Object.getPrototypeOf(Human)).call(this, id, x, y, xdot, ydot));
  }

  return Human;
}(StateVector);

Human.sideLen = 2;
Human.graphic = 'HH\nHH';

var Projectile = function (_StateVector4) {
  _inherits(Projectile, _StateVector4);

  function Projectile(id, x, y, xdot, ydot, t_spawned) {
    _classCallCheck(this, Projectile);

    var _this4 = _possibleConstructorReturn(this, (Projectile.__proto__ || Object.getPrototypeOf(Projectile)).call(this, id, x, y, xdot, ydot));

    _this4.t_spawned = t_spawned;
    return _this4;
  }

  return Projectile;
}(StateVector);

Projectile.sideLen = 2;
Projectile.graphic = '--';
Projectile.graphic2 = '**\n**';

var wrapx = function wrapx(x) {
  return (x + modulusx) % modulusx;
};

var updatePlayerPosition = function updatePlayerPosition(sv, input) {
  sv.xdot += playerAccel * input.leftright;
  sv.ydot += playerAccel * input.updown;

  sv.xdot += playerDamping * -sv.xdot;
  sv.ydot += playerDamping * -sv.ydot;

  sv.x = halfmodulusx;
  sv.y += sv.ydot;

  if (sv.y < 0) sv.y = 0;
  if (sv.y > Global.viewHeight - 5) sv.y = Global.viewHeight - 5;

  return sv;
};

var updatePlayerState = function updatePlayerState(player, input) {
  if (input.leftright != 0) {
    player.state = input.leftright == -1 ? PlayerState.faceLeft : PlayerState.faceRight;
  }
};

var updateInvaderPosition = function updateInvaderPosition(sv, state, targetx, targety) {
  var _InvaderState$seeking;

  var a = (_InvaderState$seeking = {}, _defineProperty(_InvaderState$seeking, InvaderState.seeking, function () {
    sv.xdot += 0.02 * (Math.random() - 0.5);
    sv.ydot += 0.02 * (Math.random() - 0.5);
    sv.x += sv.xdot;
    sv.y += sv.ydot;

    if (sv.y < 5) {
      sv.ydot = -sv.ydot;sv.y = 5;
    }
    if (sv.y > Global.viewHeight - 5) {
      sv.ydot = -sv.ydot;sv.y = Global.viewHeight - 5;
    }
  }), _defineProperty(_InvaderState$seeking, InvaderState.locked, function () {
    sv.xdot = targetx;
    sv.ydot = 0.2;

    sv.x += sv.xdot;
    sv.y += sv.ydot;
  }), _defineProperty(_InvaderState$seeking, InvaderState.abducting, function () {
    sv.ydot = -0.2;

    sv.y += sv.ydot;
  }), _defineProperty(_InvaderState$seeking, InvaderState.mutant, function () {
    sv.x += 0.02 * (targetx - sv.x) + 3 * (Math.random() - 0.5);
    sv.y += 0.02 * (targety - sv.y);
  }), _defineProperty(_InvaderState$seeking, InvaderState.exploding, function () {}), _defineProperty(_InvaderState$seeking, InvaderState.explodingReleaseHuman, function () {}), _InvaderState$seeking)[state]();

  return sv;
};

var updateInvaders = function updateInvaders(invaders, invaderTargets, player) {
  return invaders.map(function (i) {
    var targetx = 0,
        targety = 0;
    if (i.state == InvaderState.mutant) {
      targetx = player.x;
      targety = player.y;
    } else if (invaderTargets.has(i.id)) {
      targetx = invaderTargets.get(i.id).humanXDot;
    }
    updateInvaderPosition(i, i.state, targetx, targety);
  });
};

var updateInvaderState = function updateInvaderState(invaders, events, t) {
  events.map(function (e) {
    if (e.event == Event.locked || e.event == Event.abducted || e.event == Event.dead || e.event == Event.mutated) {
      var _Event$locked$Event$a;

      var idx = invaders.findIndex(function (i) {
        return i.id == e.invaderId;
      });
      var i = invaders[idx];
      i.state = (_Event$locked$Event$a = {}, _defineProperty(_Event$locked$Event$a, Event.locked, InvaderState.locked), _defineProperty(_Event$locked$Event$a, Event.abducted, InvaderState.abducting), _defineProperty(_Event$locked$Event$a, Event.mutated, InvaderState.mutant), _defineProperty(_Event$locked$Event$a, Event.dead, i.state == InvaderState.abducting ? InvaderState.explodingReleaseHuman : InvaderState.exploding), _Event$locked$Event$a)[e.event];
      i.t_startState = t;
    }
  });
};

var updateHumanPosition = function updateHumanPosition(sv) {
  sv.x += sv.xdot;
  sv.y += sv.ydot;

  return sv;
};

var updateHumans = function updateHumans(humans) {
  return humans.map(updateHumanPosition);
};

var updateProjectilePosition = function updateProjectilePosition(sv) {
  sv.x += sv.xdot;
  sv.y += sv.ydot;

  return sv;
};

var updateProjectiles = function updateProjectiles(projectiles) {
  return projectiles.map(updateProjectilePosition);
};

var cartesianProduct2 = function cartesianProduct2(arr1, arr2) {
  return arr1.map(function (e1) {
    return arr2.map(function (e2) {
      return [e1, e2];
    });
  }).reduce(function (arr, e) {
    return arr.concat(e);
  }, []);
};

var toTuples = function toTuples(arr) {
  return arr.map(function (a) {
    return { fst: a[0], snd: a[1] };
  });
};

var xoverlap = function xoverlap(x1, size1, x2, size2) {
  return x2 < x1 + size1 && x1 < x2 + size2;
};

var yoverlap = function yoverlap(y1, size1, y2, size2) {
  return y2 < y1 + size1 && y1 < y2 + size2;
};

var collided = function collided(_ref, size1, _ref2, size2) {
  var x1 = _ref.x,
      y1 = _ref.y;
  var x2 = _ref2.x,
      y2 = _ref2.y;
  return xoverlap(x1, size1, x2, size2) && yoverlap(y1, size1, y2, size2);
};

var detectCollisions = function detectCollisions(svArr1, size1, svArr2, size2) {
  return toTuples(cartesianProduct2(svArr1, svArr2)).filter(function (svPair) {
    return collided(svPair.fst, size1, svPair.snd, size2);
  }).map(function (collidedPair) {
    return { id1: collidedPair.fst.id, id2: collidedPair.snd.id };
  });
};

var checkSeekingInvader = function checkSeekingInvader(invader, humans) {
  var inRangeHumans = humans.filter(function (h) {
    return xoverlap(invader.x, Invader.sideLen, h.x, Human.sideLen);
  });
  if (inRangeHumans.length > 0) {
    if (Math.random() < 0.1) {
      return [{ event: Event.locked, invaderId: invader.id, humanId: inRangeHumans[0].id, humanXDot: inRangeHumans[0].xdot }];
    }
  }
  return [];
};

var checkLockedInvader = function checkLockedInvader(invader, e) {
  return invader.y + Invader.sideLen >= Global.viewHeight ? [{ event: Event.abducted, invaderId: invader.id, humanId: e.humanId }, { event: Event.removeHuman, id: e.humanId }] : [];
};

var checkAbductingInvader = function checkAbductingInvader(invader) {
  return invader.y <= 0 ? [{ event: Event.mutated, invaderId: invader.id }] : [];
};

var checkHitInvaders = function checkHitInvaders(invaders, projectiles) {
  return detectCollisions(invaders, Invader.sideLen, projectiles, Projectile.sideLen).map(function (collidedPair) {
    return { event: Event.dead, invaderId: collidedPair.id1 };
  });
};

var checkHitPlayer = function checkHitPlayer(player, projectiles) {
  return detectCollisions([player], Player.sideLen, projectiles, Projectile.sideLen).map(function (collidedPair) {
    return { event: Event.playerDead };
  });
};

var checkProjectiles = function checkProjectiles(projectiles, t) {
  return projectiles.filter(function (p) {
    return t - p.t_spawned > projectileLifetime;
  }).map(function (p) {
    return { event: Event.removeProjectile, id: p.id };
  });
};

var toLocal = function toLocal(sv) {
  var lx = sv.x - offsetx;
  lx += Global.viewWidth / 2;

  var ly = sv.y;

  return { id: sv.id, lx: lx, ly: ly, gx_debug: sv.x };
};

var clip = function clip(lcoords) {
  return lcoords.lx >= 0 && lcoords.ly < Global.viewWidth;
};

var remove = function remove(objects, id, graphics) {
  var o = objects.findIndex(function (o) {
    return o.id == id;
  });
  objects.splice(o, 1);
  graphics.delete(id);
};

var initArray = function initArray(n, f) {
  return Array(n).fill().map(f);
};

var offsetx = 0;
var targetoffsetx = 0;
var playerId = 1;
var invaderId = 100;
var player = new Player(playerId, 0, 96 / 2, PlayerState.faceRight, 0);
var invaders = initArray(10, function (_) {
  return new Invader(invaderId++, Math.floor(Math.random() * modulusx), 96 / 2, InvaderState.seeking, 0);
});
var humanId = 200;
var humans = initArray(10, function (_) {
  return new Human(humanId++, Math.floor(Math.random() * modulusx), 94, 0.2 * (Math.random() - 0.5));
});
var projectileId = 500;
var projectiles = [];
var invaderProjectileId = 1000;
var invaderProjectiles = [];
var graphics = new Map();
var invaderTargets = new Map();

var t = 0;

var doGame = function doGame(fastTextMode, viewWidth, viewHeight, input) {
  var debug = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;


  Global.viewWidth = viewWidth;
  Global.viewHeight = viewHeight;

  if (input.fire) {
    projectiles.push(new Projectile(projectileId++, player.x, player.y + 1, player.state == PlayerState.faceLeft ? -4 : 4, 0, t));
    if (projectileId >= 1000) projectileId = 500;
  }

  var seekingInvaders = invaders.filter(function (i) {
    return i.state == InvaderState.seeking;
  });
  var lockedInvaders = invaders.filter(function (i) {
    return i.state == InvaderState.locked;
  });
  var abductingInvaders = invaders.filter(function (i) {
    return i.state == InvaderState.abducting;
  });
  var mutantInvaders = invaders.filter(function (i) {
    return i.state == InvaderState.mutant;
  });

  seekingInvaders.map(function (i) {
    if (Math.random() < 0.01) {
      invaderProjectiles.push(new Projectile(invaderProjectileId++, i.x, i.y, Math.random() - 0.5, Math.random() - 0.5, t));
    }
  });

  mutantInvaders.map(function (i) {
    if (Math.random() < 0.1) {
      invaderProjectiles.push(new Projectile(invaderProjectileId++, i.x, i.y, Math.random() - 0.5, Math.random() - 0.5, t));
    }
  });

  if (invaderProjectileId >= 1500) invaderProjectileId = 1000;
  if (invaderProjectiles.length > 30) remove(invaderProjectiles, invaderProjectiles[0].id, graphics);

  var projectileEvents = checkProjectiles(projectiles, t);

  var hitEvents = checkHitInvaders(invaders, projectiles);

  var playerHitEvent = checkHitPlayer(player, invaderProjectiles);

  var seekingInvaderEvents = seekingInvaders.reduce(function (arr, i) {
    return arr.concat(checkSeekingInvader(i, humans));
  }, []);
  var lockedInvaderEvents = lockedInvaders.reduce(function (arr, i) {
    return arr.concat(checkLockedInvader(i, invaderTargets.get(i.id)));
  }, []);
  var abductingInvaderEvents = abductingInvaders.reduce(function (arr, i) {
    return arr.concat(checkAbductingInvader(i));
  }, []);

  var invaderEvents = [].concat(hitEvents, seekingInvaderEvents, lockedInvaderEvents, abductingInvaderEvents);

  var allEvents = [].concat(projectileEvents, playerHitEvent, invaderEvents);
  allEvents.filter(function (e) {
    return e.event == Event.removeProjectile;
  }).map(function (e) {
    return remove(projectiles, e.id, graphics);
  });
  allEvents.filter(function (e) {
    return e.event == Event.locked;
  }).map(function (e) {
    return invaderTargets.set(e.invaderId, e);
  });
  allEvents.filter(function (e) {
    return e.event == Event.removeHuman;
  }).map(function (e) {
    return remove(humans, e.id, graphics);
  });
  allEvents.filter(function (e) {
    return e.event == Event.playerDead;
  }).map(function (e) {
    return eiofjeiof();
  });

  graphics.set(player.id, player.state == PlayerState.faceLeft ? Player.graphic[0] : Player.graphic[1]);

  invaders.map(function (i) {
    var g = i.state == InvaderState.abducting ? Invader.graphicAbducting : Invader.graphic;
    graphics.set(i.id, g);
  });
  humans.map(function (h) {
    return graphics.set(h.id, Human.graphic);
  });
  projectiles.map(function (p) {
    return graphics.set(p.id, Projectile.graphic);
  });
  invaderProjectiles.map(function (p) {
    return graphics.set(p.id, Projectile.graphic2);
  });

  // non-functional code section. game objects are updated 'in-place'
  updatePlayerState(player, input);
  updateInvaderState(invaders, invaderEvents, t);

  updatePlayerPosition(player, input);
  updateInvaders(invaders, invaderTargets, player);
  updateHumans(humans);
  updateProjectiles(projectiles);
  updateProjectiles(invaderProjectiles);
  // end non-functional code section

  // events based on state changes must be placed after update code

  // abducting invaders drop human when hit
  invaders.filter(function (i) {
    return i.state == InvaderState.explodingReleaseHuman && i.t_startState == t;
  }).map(function (i) {
    return humans.push(new Human(humanId++, i.x + 2, i.y, 0, 0.1));
  });

  invaders.filter(function (i) {
    return i.state == InvaderState.explodingReleaseHuman || i.state == InvaderState.exploding && i.t_startState == t;
  }).map(function (i) {
    return remove(invaders, i.id, graphics);
  });

  var displacementList = [].concat(invaders, humans, projectiles, invaderProjectiles);

  var displacement = player.xdot;
  displacementList.map(function (o) {
    o.x = wrapx(o.x - displacement);
  });

  var displayList = displacementList.concat(player);

  displayList.map(toLocal).filter(clip).map(function (i) {
    fastTextMode.setString(Math.floor(i.lx), Math.floor(i.ly), graphics.has(i.id) ? graphics.get(i.id) : '!');
    if (debug) {
      // overlay object id and x coordinate
      fastTextMode.setNumber(Math.floor(i.lx + 3), Math.floor(i.ly), i.id);
      fastTextMode.setNumber(Math.floor(i.lx), Math.floor(i.ly + 4), Math.floor(i.gx_debug));
    }
  });

  player.state == PlayerState.faceLeft ? targetoffsetx = halfmodulusx - 32 : targetoffsetx = halfmodulusx + 32;
  offsetx += easing * (targetoffsetx - offsetx);

  // let e = checkSeekingInvaders(invaders.filter(i => i.state == InvaderState.seeking), humans);

  t++;
};
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
* FastTextMode
*
* Copyright (C) 2016  Mark Purser
* Released under the MIT license
* http://github.com/markpurser/fast-text-mode/LICENSE
*
* Tile rendering based on
* https://github.com/jice-nospam/yendor.ts
* Copyright (c) 2014 Jice
*/

var FastTextMode = function () {
    function FastTextMode() {
        _classCallCheck(this, FastTextMode);
    }

    _createClass(FastTextMode, [{
        key: 'init',
        value: function init(options) {
            var _this = this;

            options = options || {};
            Object.keys(FastTextMode.defaults).forEach(function (key) {
                if (!(key in options)) options[key] = FastTextMode.defaults[key];
            });

            _this._options = options;

            return new Promise(function (resolve, reject) {
                // create a new instance of a pixi container
                _this._parentContainer = new PIXI.Container();

                _this._tileTextures = [];

                // create a renderer instance
                var pixiOptions = {
                    clearBeforeRender: true,
                    preserveDrawingBuffer: false,
                    resolution: 1,
                    view: options.renderCanvas
                };

                _this._renderer = PIXI.autoDetectRenderer(options.renderCanvasSize.width, options.renderCanvasSize.height, pixiOptions);
                _this._renderer.backgroundColor = 0x0;

                _this._stats = {
                    fpsText: new PIXI.Text('', { font: '24px Arial', fill: 0xff1010 }),
                    fpsTimer: 0,
                    currentFrameCount: 0
                };

                var loader = PIXI.loader;
                loader.add('tilesheet', options.tilesheetImage);

                loader.load(function (loader, resources) {
                    var numTilesX = resources.tilesheet.texture.width / options.tileWidthPx;
                    var numTilesY = resources.tilesheet.texture.height / options.tileHeightPx;

                    // init tile textures
                    for (var x = 0; x < numTilesX; x++) {
                        for (var y = 0; y < numTilesY; y++) {
                            var rect = new PIXI.Rectangle(x * options.tileWidthPx, y * options.tileHeightPx, options.tileWidthPx, options.tileHeightPx);
                            _this._tileTextures[x + y * numTilesX] = new PIXI.Texture(resources.tilesheet.texture, rect);
                        }
                    }

                    _this._worldSpriteContainer = new SpriteGrid(options.viewWidth, options.viewHeight, options.tileWidthPx, options.tileHeightPx, _this._tileTextures['.'.codePointAt(0)]);

                    _this._parentContainer.addChild(_this._worldSpriteContainer.getSpriteContainer());
                    _this._parentContainer.addChild(_this._stats.fpsText);

                    resolve();
                });
            });
        }
    }, {
        key: 'render',
        value: function render() {
            if (this._options.displayStats) {
                this.updateStats(this._stats);
            }

            // render
            this._renderer.render(this._parentContainer);

            // clear screen
            for (var x = 0; x < this._options.viewWidth; x++) {
                for (var y = 0; y < this._options.viewHeight; y++) {
                    this.set(x, y, ' ');
                }
            }
        }
    }, {
        key: 'set',
        value: function set(x, y, tileCode) {
            if (x < 0 || x >= this._options.viewWidth || y < 0 || y >= this._options.viewHeight) return;

            if (typeof tileCode === 'string') {
                tileCode = tileCode.codePointAt(0);
            }
            var index = x + y * this._options.viewWidth;
            this._worldSpriteContainer.getSprites()[index].texture = this._tileTextures[tileCode];
        }
    }, {
        key: 'setString',
        value: function setString(x, y, tileString) {
            var X = x;
            for (var c = 0; c < tileString.length; c++) {
                var tileCode = tileString.codePointAt(c);
                if (tileCode == 10) {
                    y++;
                    x = X;
                } else {
                    this.set(x, y, tileCode);
                    x++;
                }
            }
        }
    }, {
        key: 'setNumber',
        value: function setNumber(x, y, number) {
            this.setString(x, y, number.toString());
        }
    }, {
        key: 'updateStats',
        value: function updateStats(stats) {
            stats.currentFrameCount++;
            if (stats.fpsTimer === 0) {
                stats.fpsTimer = new Date().getTime();
            } else if (new Date().getTime() - stats.fpsTimer > 1000) {
                var rendererTypeStr = 'Canvas';
                if (this._renderer instanceof PIXI.WebGLRenderer) {
                    rendererTypeStr = 'WebGL';
                }
                stats.fpsText.text = 'fps: ' + stats.currentFrameCount + '\npixi: ' + PIXI.VERSION + '\nRenderer: ' + rendererTypeStr;
                stats.fpsTimer = new Date().getTime();
                stats.currentFrameCount = 0;
            }
        }
    }]);

    return FastTextMode;
}();

FastTextMode.defaults = {
    renderCanvasSize: { width: 1600, height: 900 },
    tilesheetImage: "assets/terminal.png",
    tileWidthPx: 8,
    tileHeightPx: 8,
    viewWidth: 128,
    viewHeight: 128,
    displayStats: true
};

var SpriteGrid = function () {
    function SpriteGrid(gridWidth, gridHeight, tileWidthPx, tileHeightPx, tileTexture) {
        _classCallCheck(this, SpriteGrid);

        this.spriteContainer = new PIXI.Container();
        this.sprites = [];

        // init grid
        for (var x = 0; x < gridWidth; x++) {
            for (var y = 0; y < gridHeight; y++) {
                var sprite = new PIXI.Sprite(tileTexture);
                sprite.position.x = x * tileWidthPx;
                sprite.position.y = y * tileHeightPx;
                sprite.width = tileWidthPx;
                sprite.height = tileHeightPx;
                this.sprites[x + y * gridWidth] = sprite;
                this.spriteContainer.addChild(sprite);
            }
        }
    }

    _createClass(SpriteGrid, [{
        key: 'getSpriteContainer',
        value: function getSpriteContainer() {
            return this.spriteContainer;
        }
    }, {
        key: 'getSprites',
        value: function getSprites() {
            return this.sprites;
        }
    }]);

    return SpriteGrid;
}();
//# sourceMappingURL=es6-defender.min.js.map
